[{"_id":"58f7360fac83368eb2ffdbb9","title":"本地搭建七牛图床","path":"create-qiniu-img","category":"Web前端","toc":"<ul id='toc'>\n<li><a href=\"#准备工作\">准备工作</a></li>\n<li><a href=\"#配置-qrync\">配置 qrync</a></li>\n<li><a href=\"#配置-confjson\">配置 conf.json</a></li>\n<li><a href=\"#使用命令行进行同步\">使用命令行进行同步</a></li>\n</ul>","markdown":"最近要搭建新的博客，之前写博客图片一般是保存到本地，或者上传到微博，微博会有水印啊，所以打算折腾一下七牛了，采用qrsync命令行同步工具打造一个图床。\n\n### 准备工作\n\n1. 首先你要有一个七牛账户啊\n2. 下载[qrync命令行同步工具](http://docs.qiniu.com/tools/v6/qrsync.html)\n\n### 配置 qrync\n\n要做的是把下载的zip文件夹里的qrync移到`/usr/local/bin` 目录下，方法很多。\n\n例如命令行：\n\n```bash\ncp /Users/zhangruiwu/Downloads/qiniu-devtools-darwin_amd64-v2.6.20131211/qrsync /usr/local/bin\n```\n\n这样在你的shell里就可以用qrsync这个命令了\n\n### 配置 conf.json\n\n先建立一个配置文件，比如叫 conf.json，内容大体如下：\n\n```json\n{\n    \"access_key\": \"Please apply your access key here\",\n    \"secret_key\": \"Dont send your secret key to anyone\",\n    \"bucket\": \"Bucket name on qiniu resource storage\",\n    \"sync_dir\": \"Local directory to upload\",\n    \"async_ops\": \"fop1;fop2;fopN\",\n    \"debug_level\": 1\n}\n```\n\n其中，`access_key` 和 `secret_key`在七牛云存储平台上申请，登录七牛开发者自助平台，查看 `Access Key` 和 `Secret Key`\n\n`bucket` 是你在七牛云存储上希望保存数据的 `Bucket `名（类似于数据库的表），这个自己选择一个合适的就可以，要求是只能由字母、数字、下划线等组成。\n\n`sync_dir` 是本地需要上传的目录，绝对路径完整表示。这个目录中的所有内容会被同步到指定的 `bucket `上。注意：Windows 平台上路径的表示格式为：`盘符:/目录`，比如 E 盘下的目录 data 表示为：`e:/data` 。\n\n`async_ops` 是设置上传预转参数，一般上传的音视频如果需要转码，可以使用该参数。\n\n`ignore_patterns`参数是一个关于忽略文件或目录的匹配字符串数组，匹配规则类似.gitignore.\n具体参考[官方文档](http://docs.qiniu.com/tools/v6/qrsync.html)\n\n### 使用命令行进行同步\n\n命令行输入：\n\n```bash\nqrsync /qnblog.json\n```\n出现如下结果则是上传成功：\n![](https://xiao555.netlify.com/qntc-1.png)\n\n而图床的外链前缀是固定的，所以命名好图片后，直接在固定前缀后面加上文件名就行了，比较方便：\n\n![](https://xiao555.netlify.com/qntc-2.png)\n\n参考资料：[qrsync 命令行同步工具 ](http://docs.qiniu.com/tools/v6/qrsync.html)\n\n\n\n\n","content":"<p>最近要搭建新的博客，之前写博客图片一般是保存到本地，或者上传到微博，微博会有水印啊，所以打算折腾一下七牛了，采用qrsync命令行同步工具打造一个图床。</p>\n<h3 id=\"准备工作\">准备工作</h3>\n<ol>\n<li>首先你要有一个七牛账户啊</li>\n<li>下载<a href=\"http://docs.qiniu.com/tools/v6/qrsync.html\">qrync命令行同步工具</a></li>\n</ol>\n<h3 id=\"配置-qrync\">配置 qrync</h3>\n<p>要做的是把下载的zip文件夹里的qrync移到<code>/usr/local/bin</code> 目录下，方法很多。</p>\n<p>例如命令行：</p>\n<pre><code class=\"lang-bash\">cp <span class=\"hljs-regexp\">/Users/</span>zhangruiwu<span class=\"hljs-regexp\">/Downloads/</span>qiniu-devtools-darwin_amd64-v2.<span class=\"hljs-number\">6.20131211</span><span class=\"hljs-regexp\">/qrsync /u</span>sr<span class=\"hljs-regexp\">/local/</span>bin\n</code></pre>\n<p>这样在你的shell里就可以用qrsync这个命令了</p>\n<h3 id=\"配置-confjson\">配置 conf.json</h3>\n<p>先建立一个配置文件，比如叫 conf.json，内容大体如下：</p>\n<pre><code class=\"lang-json\">{\n    <span class=\"hljs-attr\">\"access_key\"</span>: <span class=\"hljs-string\">\"Please apply your access key here\"</span>,\n    <span class=\"hljs-attr\">\"secret_key\"</span>: <span class=\"hljs-string\">\"Dont send your secret key to anyone\"</span>,\n    <span class=\"hljs-attr\">\"bucket\"</span>: <span class=\"hljs-string\">\"Bucket name on qiniu resource storage\"</span>,\n    <span class=\"hljs-attr\">\"sync_dir\"</span>: <span class=\"hljs-string\">\"Local directory to upload\"</span>,\n    <span class=\"hljs-attr\">\"async_ops\"</span>: <span class=\"hljs-string\">\"fop1;fop2;fopN\"</span>,\n    <span class=\"hljs-attr\">\"debug_level\"</span>: <span class=\"hljs-number\">1</span>\n}\n</code></pre>\n<p>其中，<code>access_key</code> 和 <code>secret_key</code>在七牛云存储平台上申请，登录七牛开发者自助平台，查看 <code>Access Key</code> 和 <code>Secret Key</code></p>\n<p><code>bucket</code> 是你在七牛云存储上希望保存数据的 <code>Bucket</code>名（类似于数据库的表），这个自己选择一个合适的就可以，要求是只能由字母、数字、下划线等组成。</p>\n<p><code>sync_dir</code> 是本地需要上传的目录，绝对路径完整表示。这个目录中的所有内容会被同步到指定的 <code>bucket</code>上。注意：Windows 平台上路径的表示格式为：<code>盘符:/目录</code>，比如 E 盘下的目录 data 表示为：<code>e:/data</code> 。</p>\n<p><code>async_ops</code> 是设置上传预转参数，一般上传的音视频如果需要转码，可以使用该参数。</p>\n<p><code>ignore_patterns</code>参数是一个关于忽略文件或目录的匹配字符串数组，匹配规则类似.gitignore.\n具体参考<a href=\"http://docs.qiniu.com/tools/v6/qrsync.html\">官方文档</a></p>\n<h3 id=\"使用命令行进行同步\">使用命令行进行同步</h3>\n<p>命令行输入：</p>\n<pre><code class=\"lang-bash\">qrsync <span class=\"hljs-string\">/qnblog.json</span>\n</code></pre>\n<p>出现如下结果则是上传成功：\n<img src=\"https://xiao555.netlify.com/qntc-1.png\" alt=\"\"></p>\n<p>而图床的外链前缀是固定的，所以命名好图片后，直接在固定前缀后面加上文件名就行了，比较方便：</p>\n<p><img src=\"https://xiao555.netlify.com/qntc-2.png\" alt=\"\"></p>\n<p>参考资料：<a href=\"http://docs.qiniu.com/tools/v6/qrsync.html\">qrsync 命令行同步工具 </a></p>\n","excerptMarkdown":"最近要搭建新的博客，之前写博客图片一般是保存到本地，或者上传到微博，微博会有水印啊，所以打算折腾一下七牛了，采用qrsync命令行同步工具打造一个图床。","excerpt":"<p>最近要搭建新的博客，之前写博客图片一般是保存到本地，或者上传到微博，微博会有水印啊，所以打算折腾一下七牛了，采用qrsync命令行同步工具打造一个图床。</p>\n","status":"Published","lastEditTime":"2017-07-23","createTime":"2017-01-14","tags":["七牛"],"visits":50,"id":"58f7360fac83368eb2ffdbb9"},{"_id":"58f76feaac83368eb2ffdbbb","title":"如何写 Webpack 配置文件","path":"how-to-configure-webpack","category":"Web前端","toc":"<ul id='toc'>\n<li><a href=\"#base\">Base</a></li>\n<li><a href=\"#loader\">Loader</a></li>\n<li><a href=\"#我们改造一下\">我们改造一下：</a></li>\n<li><a href=\"#让我们继续改造\">让我们继续改造：</a><ul><li><a href=\"#1-引入第三方css\">1. 引入第三方css</a></li>\n<li><a href=\"#2-多html文件\">2. 多html文件</a></li>\n<li><a href=\"#3-某些文件单独打包\">3. 某些文件单独打包</a></li>\n<li><a href=\"#4-热加载\">4. 热加载</a></li>\n<li><a href=\"#5-配置stylus和babel\">5. 配置stylus和babel</a></li></ul>\n</li>\n<li><a href=\"#总结\">总结</a></li>\n</ul>","markdown":"本文从一个小Demo开始，通过不断增加功能来说明webpack的基本配置，只针对新手，也欢迎指正错误。\n\nNode.js version： -v7.7.0\nwebpack 最好全局装一下\n\n### Base\n我们先从简单的Demo开始，首先我创建了一个项目目录`webpack`，在该目录下运行命令：\n```bash\nnpm init\nnpm install webpack html-loader style-loader css-loader --save-dev\n```\n安装完成后我的`package.json`是这样子的：\n```json\n{\n  \"name\": \"webpack-example\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A webpack example\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"webpack\"\n  ],\n  \"author\": \"xiao555\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"css-loader\": \"^0.28.0\",\n    \"html-loader\": \"^0.4.5\",\n    \"webpack\": \"^2.3.3\"\n  }\n}\n```\n然后我在根目录下创建了`index.html`，`style.css`，`entry.js`，`webpack.config.js`:\n```html\n// index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello Webpack</title>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./style.css\">\n</head>\n<body>\n  <h1>Hello Webpack!</h1>\n  <script src=\"/bundle.js\"></script>\n</body>\n</html>\n```\n```css\n// style.css\nh1 {\n  color: lightblue;\n}\n```\n```javascript\n// entry.js\nrequire('./style.css')\n```\n```javascript\n// webpack.config.js\nlet webpack = require('webpack')\n\nmodule.exports = {\n  entry: './entry.js',\n  output: {\n    path: __dirname,\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader'\n      }\n    ]\n  }\n}\n```\n然后修改一下`package.json`的scripts:\n```javascript\n\"scripts\": { \n    \"start\": \"webpack --config webpack.config.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n```\n好了，这样一个简单的Demo就完成了，让我们看一下效果：\n```bash\n➜  webpack npm start\n\n> webpack-example@1.0.0 start /Users/zhangruiwu/Desktop/webpack\n> webpack --config webpack.config.js\n\nHash: f9e8a168c2845147afb4\nVersion: webpack 2.3.3\nTime: 384ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  73.1 kB       0  [emitted]  main\n   [0] ./style.css 895 bytes {0} [built]\n   [1] ./entry.js 22 bytes {0} [built]\n   [2] ./~/base64-js/index.js 3.48 kB {0} [built]\n   [3] ./~/buffer/index.js 48.6 kB {0} [built]\n   [4] ./~/css-loader!./style.css 190 bytes {0} [built]\n   [5] ./~/css-loader/lib/css-base.js 2.19 kB {0} [built]\n   [6] ./~/ieee754/index.js 2.05 kB {0} [built]\n   [7] ./~/isarray/index.js 132 bytes {0} [built]\n   [8] ./~/style-loader/addStyles.js 8.51 kB {0} [built]\n   [9] ./~/style-loader/fixUrls.js 3.01 kB {0} [built]\n  [10] (webpack)/buildin/global.js 509 bytes {0} [built]\n```\n可以看到目录里生成了一个`bundle.js`，这就是webpack打包后的文件，我们在浏览器里打开`index.html`:\n![](https://xiao555.netlify.com/hello_webpack.jpg)\nOK, 可以看到我们的css已经渲染上去了。\n我们的webpack配置文件做了什么呢？\n```javascript\n// webpack.config.js\nlet webpack = require('webpack')\n\nmodule.exports = {\n  entry: './entry.js', // 入口文件，根据这个文件来决定打包哪些文件\n  output: {\n    path: __dirname,   // 打包后文件存放的路径\n    filename: 'bundle.js' // 打包后文件的名称\n  },\n  module: { // 决定不同类型的模块如何处理\n    rules: [ // 决定了模块创建规则，\n      {\n        test: /\\.css$/, // 匹配文件类型\n        loader: 'style-loader!css-loader' // 应用加载器，'-loader'可以省略(v2好像不可以了)\n      }\n    ]\n  }\n}\n```\n### Loader\n好了，让我们改一下，我再目录里加了一张图片`bg.jpg`,修改了`style.css` ：\n```css\nh1 {\n  color: lightblue;\n}\n\nbody {\n  background-image: url('./bg.jpg');\n}\n```\n`npm start` 一下： \n```bash\nERROR in ./bg.jpg\nModule parse failed: /Users/zhangruiwu/Desktop/webpack/bg.jpg Unexpected character '�' (1:0)\nYou may need an appropriate loader to handle this file type.\n(Source code omitted for this binary file)\n @ ./~/css-loader!./style.css 6:94-113\n @ ./style.css\n @ ./entry.js\n```\n报错了，这个错误是什么呢？因为我们引入了一个jpg图片文件，要打包的话需要一个处理这种文件类型的loader：\n```javascript\n// bash\nnpm i url-loader --save-dev\n// webpack.config.js\nmodule: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader'\n      },\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/,\n        loader: 'url-loader' // copy文件的loader\n      }\n    ]\n  }\n```\n重新`npm start`，发现根目录下多了一个`f58125a1fa5c143130104dc5fa9af77b.jpg`, 浏览器打开`index.html`:\n![](https://xiao555.netlify.com/webpack_bg.jpg)\n\nOK! \n\n### 我们改造一下： \n1. css用stylus\n2. css,img等资源放在`/src`目录下\n3. 打包后图片文件放在`/dist/static`目录下\n4. 打包文件统一放在一个目录下`/dist`\n\n```bash\nnpm i stylus stylus-loader html-webpack-plugin --save-dev\n```\n调整目录结构：\n\n```bash\n- webpack\n\t- src\n\t\t- assets\n\t\t\t- img\n\t\t\t\t- bg.jpg\n\t\t- style\n\t\t\t- main.styl\n\t\t\t- entry.js\n\t- index.html\n\t- webpack.config.js\n\t- package.json \n```\n\n```html\n// index.html\n<!DOCTYPE html>\n<html>\n<head>\n  <title>Hello Webpack</title>\n</head>\n<body>\n  <h1>Hello Webpack!</h1>\n</body>\n</html>\n```\n\n```stylus\n// main.styl\nh1\n  color lightblue\nbody\n  background-image url('~assets/image/bg.jpg')\n```\n```javascript\n// entry.js\nimport './main.styl'\n```\n```javascript\n// webpack.config.js\nlet webpack = require('webpack')\nlet path = require('path')\nlet HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  entry: {\n    style: './src/style/entry.js' // 新的入口文件\n  },\n  output: {\n    path: path.join(__dirname, './dist'), // 新的打包目录\n    filename: '[name].js' // 这里的name对应entry的key值，这里是style，如果增加一个入口文件scrit的话，同样生成一个script.js\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader?sourceMap'\n      },\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/,\n        loader: 'url-loader?name=static/[hash].[ext]' // '?'后跟loader的配置参数，这里name指文件名，static目录下\n      },\n      { \n        test: /\\.styl$/,  // 增加stylus文件的loader\n        loader: \"style-loader!css-loader!stylus-loader?sourceMap\" // 可以通过'!'来级联loader\n      }\n    ]\n  },\n  resolve: {\n    alias: {\n      'assets': path.join(__dirname, './src/assets') // 定义别名，用法见main.styl 里 background-image url('~assets/image/bg.jpg')\n    }\n  },\n  plugins: [\n\t  // 这个插件用来处理html文件，https://github.com/jantimon/html-webpack-plugin , 这里的作业是吧index.html打包到dist目录下\n    new HtmlWebpackPlugin({ \n      filename: 'index.html',\n      template: 'index.html'\n    })\n  ]\n}\n```\n`npm start` 之后生成的目录结构：\n```\n- dist\n\t- static\n\t\t- f58125a1fa5c143130104dc5fa9af77b.jpg\n\t- index.html\n\t- style.js \n```\n浏览器访问这个目录下的`index.html`，没有问题，为什么要把html搞到`dist`目录下呢？  可以F12看看body背景图片的url，是相对与打包目录`dist`的，也就是说这里访问的根目录是打包目录，我们的html也要放进去。\n\n###  让我们继续改造：\n#### 1. 引入第三方css\n以FontAwesome为例：\n```path\nnpm install font-awesome --save\n```\n```javascript\nmodule: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader?sourceMap'\n      },\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/,\n        loader: 'url-loader?name=static/[hash].[ext]'\n      },\n      { \n        test: /\\.styl$/, \n        loader: \"style-loader!css-loader!stylus-loader?sourceMap\"\n      },\n      {\n\t      // FontAwesome 需要加载字体文件，(\\?.*) 处理带版本号的文件\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: 'fonts/[name].[hash:7].[ext]'\n        }\n      }\n    ]\n  },\n```\n#### 2. 多html文件\n`html-webpack-plugin` 这个插件处理多html文件，就是多new几次，也可以通过数组ForEach的方法：\n```javascript\nlet config = {\n  entry: {\n    style: './src/style/entry.js'\n  },\n  output: {\n    path: path.join(__dirname, './dist'),\n    filename: '[name].js'\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        loader: 'style-loader!css-loader?sourceMap'\n      },\n      {\n        test: /\\.(jpe?g|png|gif|svg)$/,\n        loader: 'url-loader?name=static/[hash].[ext]'\n      },\n      { \n        test: /\\.styl$/, \n        loader: \"style-loader!css-loader!stylus-loader?sourceMap\"\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: 'fonts/[name].[hash:7].[ext]'\n        }\n      }\n    ]\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'assets': path.join(__dirname, './src/assets')\n    }\n  },\n  plugins: []\n}\nconst array = ['index', 'test']\narray.forEach((file) => {\n  const conf = {\n    filename: `${file}.html`,\n    template: `${file}.html`\n  }\n  config.plugins.push(new HtmlWebpackPlugin(conf))\n})\n\nmodule.exports = config\n```\n####  3. 某些文件单独打包\n以jquery为例：\n```bash\nnpm i file-loader --save-dev\nnpm i jquery --save\n```\n```\n- src\n\t- script\n\t\t- entry.js\n\n// entry.js\nimport 'copy!jquery/dist/jquery.min.js'\n```\n```javascript\n// webpack.config.js\nentry: {\n  style: './src/style/entry.js',\n  script: './src/script/entry.js' // 新增入口文件\n},\n...\nresolveLoader: { // 处理loader\n  alias: {\n    'copy': 'file-loader?name=[name].[ext]', //&context=./src\n  }\n},\n```\n`npm start` 后会发现`/dist` 目录下`jquery.min.js`已经单独打包出来了\n#### 4. 热加载\n以BrowserSync为例：\n```bash\nnpm i browser-sync browser-sync-webpack-plugin --save-dev\n```\n```javascript\nlet BrowserSyncPlugin   = require('browser-sync-webpack-plugin')\n\nlet config = {\n watch: true,\n plugins: [\n    new BrowserSyncPlugin(\n      // BrowserSync options \n      {\n        // browse to http://localhost:3000/ during development \n        host: 'localhost',\n        port: 4000,\n        // proxy the Webpack Dev Server endpoint \n        // (which should be serving on http://localhost:3100/) \n        // through BrowserSync \n        // proxy: 'http://localhost:3100/'\n        server: { \n          baseDir: ['dist'],\n          directory: true  // with directory listing\n        }\n      },\n      // plugin options \n      {\n        // prevent BrowserSync from reloading the page \n        // and let Webpack Dev Server take care of this \n        reload: true\n      }\n    )\n  ]\n}\n```\n会自动打开浏览器访问`http://localhost:4000/`, 修改被打包的文件会自动刷新\n#### 5. 配置stylus和babel\n```bash\nnpm i autoprefixer nib poststylus babel-core babel-loader babel-plugin-transform-runtime babel-preset-es2015 --save-dev\n```\n```stylus\n// ./src/style/variables.styl\nblue = #0073aa\n```\n```stylus\n// ./src/style/main.styl\nh1\n  color blue\n```\n```javascript\nlet poststylus = require('poststylus')\n...\nplugins: [\n    new webpack.LoaderOptionsPlugin({\n      // test: /\\.xxx$/, // may apply this only for some modules\n      options: {\n        stylus: {\n          use: [\n            poststylus([ 'autoprefixer' ]),\n          ],\n          import: [\n            '~nib/index.styl',\n            path.join(__dirname, 'src/style/variables.styl')\n          ]\n        },\n        babel: {\n          presets: ['es2015'],\n          plugins: ['transform-runtime']\n        }\n      }\n    }),\n    ...\n  ]\n```\n`autoprefixer`是个自动添加前缀的插件，`nib`是一个不错的css库，`variables.styl`可以作为stylus的全局变量加载，babel不用说，可以写es6的代码。\n\n### 总结\n\n感觉把以上说的走一遍，webpack基本的配置就可以熟悉了，会引入loader，配置loader选项，会设置alias，会用plugins差不多。\n\n至于现在一些比较大的项目中分多个配置文件，是根据不同的场景拆分开的，基本的一个`webpack.base.config.js`,主要包含`loader`，`resolve`等全局通用的部分，剩下的根据开发或者生产环境分成`webpack.dev.config.js`，`webpack.prod.config.js`，除了都会合并base的内容，其他可能跟去环境不一样像`output`， `plugins`也都有所不同。\n\n另外，我说的不是很详细，有些东西还要自己去踩坑，比如loader和plugins的配置可以看官方文档，我没有详细说。\n","content":"<p>本文从一个小Demo开始，通过不断增加功能来说明webpack的基本配置，只针对新手，也欢迎指正错误。</p>\n<p>Node.js version： -v7.7.0\nwebpack 最好全局装一下</p>\n<h3 id=\"base\">Base</h3>\n<p>我们先从简单的Demo开始，首先我创建了一个项目目录<code>webpack</code>，在该目录下运行命令：</p>\n<pre><code class=\"lang-bash\">npm init\nnpm <span class=\"hljs-keyword\">install</span> webpack html-loader <span class=\"hljs-keyword\">style</span>-loader css-loader <span class=\"hljs-comment\">--save-dev</span>\n</code></pre>\n<p>安装完成后我的<code>package.json</code>是这样子的：</p>\n<pre><code class=\"lang-json\">{\n  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack-example\"</span>,\n  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"A webpack example\"</span>,\n  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n  <span class=\"hljs-attr\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span>\n  },\n  <span class=\"hljs-attr\">\"keywords\"</span>: [\n    <span class=\"hljs-string\">\"webpack\"</span>\n  ],\n  <span class=\"hljs-attr\">\"author\"</span>: <span class=\"hljs-string\">\"xiao555\"</span>,\n  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n    <span class=\"hljs-attr\">\"css-loader\"</span>: <span class=\"hljs-string\">\"^0.28.0\"</span>,\n    <span class=\"hljs-attr\">\"html-loader\"</span>: <span class=\"hljs-string\">\"^0.4.5\"</span>,\n    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^2.3.3\"</span>\n  }\n}\n</code></pre>\n<p>然后我在根目录下创建了<code>index.html</code>，<code>style.css</code>，<code>entry.js</code>，<code>webpack.config.js</code>:</p>\n<pre><code class=\"lang-html\">// index.html\n<span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello Webpack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">link</span> <span class=\"hljs-attr\">rel</span>=<span class=\"hljs-string\">\"stylesheet\"</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text/css\"</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"./style.css\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello Webpack!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<pre><code class=\"lang-css\"><span class=\"hljs-comment\">// style.css</span>\n<span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: lightblue;\n}\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">require</span><span class=\"hljs-params\">(<span class=\"hljs-string\">'./style.css'</span>)</span></span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">let</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: <span class=\"hljs-string\">'./entry.js'</span>,\n  output: {\n    path: __dirname,\n    filename: <span class=\"hljs-string\">'bundle.js'</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader'</span>\n      }\n    ]\n  }\n}\n</code></pre>\n<p>然后修改一下<code>package.json</code>的scripts:</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-string\">\"scripts\"</span>: { \n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"webpack --config webpack.config.js\"</span>,\n    <span class=\"hljs-string\">\"test\"</span>: <span class=\"hljs-string\">\"echo \\\"</span><span class=\"hljs-keyword\">Error</span>: <span class=\"hljs-keyword\">no</span> <span class=\"hljs-keyword\">test</span> specified\\<span class=\"hljs-string\">\" &amp;&amp; exit 1\"</span>\n  },\n</code></pre>\n<p>好了，这样一个简单的Demo就完成了，让我们看一下效果：</p>\n<pre><code class=\"lang-bash\">➜  webpack npm start\n\n&gt; webpack-example@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span> start /Users/zhangruiwu/Desktop/webpack\n&gt; webpack --config webpack<span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span>\n\nHash: f9e8a168c2845147afb4\nVersion: webpack <span class=\"hljs-number\">2.3</span>.<span class=\"hljs-number\">3</span>\nTime: <span class=\"hljs-number\">384ms</span>\n    Asset     Size  Chunks             Chunk Names\nbundle<span class=\"hljs-selector-class\">.js</span>  <span class=\"hljs-number\">73.1</span> kB       <span class=\"hljs-number\">0</span>  [emitted]  main\n   [<span class=\"hljs-number\">0</span>] ./style<span class=\"hljs-selector-class\">.css</span> <span class=\"hljs-number\">895</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">1</span>] ./entry<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">22</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">2</span>] ./~/base64-js/index<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">3.48</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">3</span>] ./~/buffer/index<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">48.6</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">4</span>] ./~/css-loader!./style<span class=\"hljs-selector-class\">.css</span> <span class=\"hljs-number\">190</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">5</span>] ./~/css-loader/lib/css-base<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">2.19</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">6</span>] ./~/ieee754/index<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">2.05</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">7</span>] ./~/isarray/index<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">132</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">8</span>] ./~/style-loader/addStyles<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">8.51</span> kB {<span class=\"hljs-number\">0</span>} [built]\n   [<span class=\"hljs-number\">9</span>] ./~/style-loader/fixUrls<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">3.01</span> kB {<span class=\"hljs-number\">0</span>} [built]\n  [<span class=\"hljs-number\">10</span>] (webpack)/buildin/global<span class=\"hljs-selector-class\">.js</span> <span class=\"hljs-number\">509</span> bytes {<span class=\"hljs-number\">0</span>} [built]\n</code></pre>\n<p>可以看到目录里生成了一个<code>bundle.js</code>，这就是webpack打包后的文件，我们在浏览器里打开<code>index.html</code>:\n<img src=\"https://xiao555.netlify.com/hello_webpack.jpg\" alt=\"\">\nOK, 可以看到我们的css已经渲染上去了。\n我们的webpack配置文件做了什么呢？</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">let</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: <span class=\"hljs-string\">'./entry.js'</span>, <span class=\"hljs-comment\">// 入口文件，根据这个文件来决定打包哪些文件</span>\n  output: {\n    path: __dirname,   <span class=\"hljs-comment\">// 打包后文件存放的路径</span>\n    filename: <span class=\"hljs-string\">'bundle.js'</span> <span class=\"hljs-comment\">// 打包后文件的名称</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: { <span class=\"hljs-comment\">// 决定不同类型的模块如何处理</span>\n    rules: [ <span class=\"hljs-comment\">// 决定了模块创建规则，</span>\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>, <span class=\"hljs-comment\">// 匹配文件类型</span>\n        loader: <span class=\"hljs-string\">'style-loader!css-loader'</span> <span class=\"hljs-comment\">// 应用加载器，'-loader'可以省略(v2好像不可以了)</span>\n      }\n    ]\n  }\n}\n</code></pre>\n<h3 id=\"loader\">Loader</h3>\n<p>好了，让我们改一下，我再目录里加了一张图片<code>bg.jpg</code>,修改了<code>style.css</code> ：</p>\n<pre><code class=\"lang-css\"><span class=\"hljs-selector-tag\">h1</span> {\n  <span class=\"hljs-attribute\">color</span>: lightblue;\n}\n\n<span class=\"hljs-selector-tag\">body</span> {\n  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">'./bg.jpg'</span>);\n}\n</code></pre>\n<p><code>npm start</code> 一下： </p>\n<pre><code class=\"lang-bash\">ERROR <span class=\"hljs-keyword\">in</span> ./bg<span class=\"hljs-selector-class\">.jpg</span>\nModule parse failed: /Users/zhangruiwu/Desktop/webpack/bg<span class=\"hljs-selector-class\">.jpg</span> Unexpected character <span class=\"hljs-string\">'�'</span> (<span class=\"hljs-number\">1</span>:<span class=\"hljs-number\">0</span>)\nYou may need an appropriate loader to handle this file type.\n(Source <span class=\"hljs-selector-tag\">code</span> omitted <span class=\"hljs-keyword\">for</span> this binary file)\n @ ./~/css-loader!./style<span class=\"hljs-selector-class\">.css</span> <span class=\"hljs-number\">6</span>:<span class=\"hljs-number\">94</span>-<span class=\"hljs-number\">113</span>\n @ ./style<span class=\"hljs-selector-class\">.css</span>\n @ ./entry.js\n</code></pre>\n<p>报错了，这个错误是什么呢？因为我们引入了一个jpg图片文件，要打包的话需要一个处理这种文件类型的loader：</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// bash</span>\nnpm i url-loader --save-dev\n<span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader'</span>\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(jpe?g|png|gif|svg)$/</span>,\n        loader: <span class=\"hljs-string\">'url-loader'</span> <span class=\"hljs-comment\">// copy文件的loader</span>\n      }\n    ]\n  }\n</code></pre>\n<p>重新<code>npm start</code>，发现根目录下多了一个<code>f58125a1fa5c143130104dc5fa9af77b.jpg</code>, 浏览器打开<code>index.html</code>:\n<img src=\"https://xiao555.netlify.com/webpack_bg.jpg\" alt=\"\"></p>\n<p>OK! </p>\n<h3 id=\"我们改造一下\">我们改造一下：</h3>\n<ol>\n<li>css用stylus</li>\n<li>css,img等资源放在<code>/src</code>目录下</li>\n<li>打包后图片文件放在<code>/dist/static</code>目录下</li>\n<li>打包文件统一放在一个目录下<code>/dist</code></li>\n</ol>\n<pre><code class=\"lang-bash\">npm i stylus stylus-loader html-webpack-plugin --<span class=\"hljs-built_in\">save</span>-<span class=\"hljs-built_in\">dev</span>\n</code></pre>\n<p>调整目录结构：</p>\n<pre><code class=\"lang-bash\">-<span class=\"ruby\"> webpack\n</span>    -<span class=\"ruby\"> src\n</span>        -<span class=\"ruby\"> assets\n</span>            -<span class=\"ruby\"> img\n</span>                -<span class=\"ruby\"> bg.jpg\n</span>        -<span class=\"ruby\"> style\n</span>            -<span class=\"ruby\"> main.styl\n</span>            -<span class=\"ruby\"> entry.js\n</span>    -<span class=\"ruby\"> index.html\n</span>    -<span class=\"ruby\"> webpack.config.js\n</span>    -<span class=\"ruby\"> package.json</span>\n</code></pre>\n<pre><code class=\"lang-html\">// index.html\n<span class=\"hljs-meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Hello Webpack<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello Webpack!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<pre><code class=\"lang-stylus\"><span class=\"hljs-comment\">// main.styl</span>\n<span class=\"hljs-selector-tag\">h1</span>\n  <span class=\"hljs-attribute\">color</span> lightblue\n<span class=\"hljs-selector-tag\">body</span>\n  <span class=\"hljs-attribute\">background-image</span> url(<span class=\"hljs-string\">'~assets/image/bg.jpg'</span>)\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// entry.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./main.styl'</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-keyword\">let</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'webpack'</span>)\n<span class=\"hljs-keyword\">let</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"hljs-keyword\">let</span> HtmlWebpackPlugin = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'html-webpack-plugin'</span>);\n\n<span class=\"hljs-built_in\">module</span>.exports = {\n  entry: {\n    style: <span class=\"hljs-string\">'./src/style/entry.js'</span> <span class=\"hljs-comment\">// 新的入口文件</span>\n  },\n  output: {\n    path: path.join(__dirname, <span class=\"hljs-string\">'./dist'</span>), <span class=\"hljs-comment\">// 新的打包目录</span>\n    filename: <span class=\"hljs-string\">'[name].js'</span> <span class=\"hljs-comment\">// 这里的name对应entry的key值，这里是style，如果增加一个入口文件scrit的话，同样生成一个script.js</span>\n  },\n  <span class=\"hljs-keyword\">module</span>: {\n    rules: [\n      {\n        test: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader?sourceMap'</span>\n      },\n      {\n        test: <span class=\"hljs-regexp\">/\\.(jpe?g|png|gif|svg)$/</span>,\n        loader: <span class=\"hljs-string\">'url-loader?name=static/[hash].[ext]'</span> <span class=\"hljs-comment\">// '?'后跟loader的配置参数，这里name指文件名，static目录下</span>\n      },\n      { \n        test: <span class=\"hljs-regexp\">/\\.styl$/</span>,  <span class=\"hljs-comment\">// 增加stylus文件的loader</span>\n        loader: <span class=\"hljs-string\">\"style-loader!css-loader!stylus-loader?sourceMap\"</span> <span class=\"hljs-comment\">// 可以通过'!'来级联loader</span>\n      }\n    ]\n  },\n  resolve: {\n    alias: {\n      <span class=\"hljs-string\">'assets'</span>: path.join(__dirname, <span class=\"hljs-string\">'./src/assets'</span>) <span class=\"hljs-comment\">// 定义别名，用法见main.styl 里 background-image url('~assets/image/bg.jpg')</span>\n    }\n  },\n  plugins: [\n      <span class=\"hljs-comment\">// 这个插件用来处理html文件，https://github.com/jantimon/html-webpack-plugin , 这里的作业是吧index.html打包到dist目录下</span>\n    <span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin({ \n      filename: <span class=\"hljs-string\">'index.html'</span>,\n      template: <span class=\"hljs-string\">'index.html'</span>\n    })\n  ]\n}\n</code></pre>\n<p><code>npm start</code> 之后生成的目录结构：</p>\n<pre><code>-<span class=\"ruby\"> dist\n</span>    -<span class=\"ruby\"> static\n</span>        -<span class=\"ruby\"> f58125a1fa5c143130104dc5fa9af77b.jpg\n</span>    -<span class=\"ruby\"> index.html\n</span>    -<span class=\"ruby\"> style.js</span>\n</code></pre><p>浏览器访问这个目录下的<code>index.html</code>，没有问题，为什么要把html搞到<code>dist</code>目录下呢？  可以F12看看body背景图片的url，是相对与打包目录<code>dist</code>的，也就是说这里访问的根目录是打包目录，我们的html也要放进去。</p>\n<h3 id=\"让我们继续改造\">让我们继续改造：</h3>\n<h4 id=\"1-引入第三方css\">1. 引入第三方css</h4>\n<p>以FontAwesome为例：</p>\n<pre><code class=\"lang-path\">npm install <span class=\"hljs-built_in\">font</span>-awesome --<span class=\"hljs-built_in\">save</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-attr\">module:</span> <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">    rules:</span> <span class=\"hljs-string\">[</span>\n      <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">        test:</span> <span class=\"hljs-string\">/\\.css$/,</span>\n<span class=\"hljs-attr\">        loader:</span> <span class=\"hljs-string\">'style-loader!css-loader?sourceMap'</span>\n      <span class=\"hljs-string\">},</span>\n      <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">        test:</span> <span class=\"hljs-string\">/\\.(jpe?g|png|gif|svg)$/,</span>\n<span class=\"hljs-attr\">        loader:</span> <span class=\"hljs-string\">'url-loader?name=static/[hash].[ext]'</span>\n      <span class=\"hljs-string\">},</span>\n      <span class=\"hljs-string\">{</span> \n<span class=\"hljs-attr\">        test:</span> <span class=\"hljs-string\">/\\.styl$/,</span> \n<span class=\"hljs-attr\">        loader:</span> <span class=\"hljs-string\">\"style-loader!css-loader!stylus-loader?sourceMap\"</span>\n      <span class=\"hljs-string\">},</span>\n      <span class=\"hljs-string\">{</span>\n          <span class=\"hljs-string\">//</span> <span class=\"hljs-string\">FontAwesome</span> <span class=\"hljs-string\">需要加载字体文件，(\\?.*)</span> <span class=\"hljs-string\">处理带版本号的文件</span>\n<span class=\"hljs-attr\">        test:</span> <span class=\"hljs-string\">/\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,</span>\n<span class=\"hljs-attr\">        loader:</span> <span class=\"hljs-string\">'url-loader'</span><span class=\"hljs-string\">,</span>\n<span class=\"hljs-attr\">        options:</span> <span class=\"hljs-string\">{</span>\n<span class=\"hljs-attr\">          limit:</span> <span class=\"hljs-number\">10000</span><span class=\"hljs-string\">,</span>\n<span class=\"hljs-attr\">          name:</span> <span class=\"hljs-string\">'fonts/[name].[hash:7].[ext]'</span>\n        <span class=\"hljs-string\">}</span>\n      <span class=\"hljs-string\">}</span>\n    <span class=\"hljs-string\">]</span>\n  <span class=\"hljs-string\">},</span>\n</code></pre>\n<h4 id=\"2-多html文件\">2. 多html文件</h4>\n<p><code>html-webpack-plugin</code> 这个插件处理多html文件，就是多new几次，也可以通过数组ForEach的方法：</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> config = {\n  entry: {\n    style: <span class=\"hljs-string\">'./src/style/entry.js'</span>\n  },\n  outpu<span class=\"hljs-variable\">t:</span> {\n    path: path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'./dist'</span>),\n    filename: <span class=\"hljs-string\">'[name].js'</span>\n  },\n  module: {\n    rule<span class=\"hljs-variable\">s:</span> [\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.css$/,\n        loader: <span class=\"hljs-string\">'style-loader!css-loader?sourceMap'</span>\n      },\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.(jpe?g|png|gif|svg)$/,\n        loader: <span class=\"hljs-string\">'url-loader?name=static/[hash].[ext]'</span>\n      },\n      { \n        tes<span class=\"hljs-variable\">t:</span> /\\.styl$/, \n        loader: <span class=\"hljs-string\">\"style-loader!css-loader!stylus-loader?sourceMap\"</span>\n      },\n      {\n        tes<span class=\"hljs-variable\">t:</span> /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: <span class=\"hljs-string\">'url-loader'</span>,\n        option<span class=\"hljs-variable\">s:</span> {\n          limi<span class=\"hljs-variable\">t:</span> <span class=\"hljs-number\">10000</span>,\n          name: <span class=\"hljs-string\">'fonts/[name].[hash:7].[ext]'</span>\n        }\n      }\n    ]\n  },\n  <span class=\"hljs-built_in\">resolve</span>: {\n    extension<span class=\"hljs-variable\">s:</span> [<span class=\"hljs-string\">'.js'</span>, <span class=\"hljs-string\">'.vue'</span>, <span class=\"hljs-string\">'.json'</span>],\n    alia<span class=\"hljs-variable\">s:</span> {\n      <span class=\"hljs-string\">'assets'</span>: path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'./src/assets'</span>)\n    }\n  },\n  plugin<span class=\"hljs-variable\">s:</span> []\n}\nconst array = [<span class=\"hljs-string\">'index'</span>, <span class=\"hljs-string\">'test'</span>]\narray.forEach((<span class=\"hljs-keyword\">file</span>) =&gt; {\n  const <span class=\"hljs-keyword\">conf</span> = {\n    filename: `${<span class=\"hljs-keyword\">file</span>}.html`,\n    template: `${<span class=\"hljs-keyword\">file</span>}.html`\n  }\n  config.plugins.push(<span class=\"hljs-keyword\">new</span> HtmlWebpackPlugin(<span class=\"hljs-keyword\">conf</span>))\n})\n\nmodule.exports = config\n</code></pre>\n<h4 id=\"3-某些文件单独打包\">3. 某些文件单独打包</h4>\n<p>以jquery为例：</p>\n<pre><code class=\"lang-bash\">npm <span class=\"hljs-selector-tag\">i</span> file-loader --save-dev\nnpm <span class=\"hljs-selector-tag\">i</span> jquery --save\n</code></pre>\n<pre><code>-<span class=\"ruby\"> src\n</span>    -<span class=\"ruby\"> script\n</span>        -<span class=\"ruby\"> entry.js\n</span><span class=\"hljs-comment\">\n// entry.js</span>\nimport 'copy!jquery/dist/jquery.min.js'\n</code></pre><pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"hljs-attribute\">entry</span>: {\n  <span class=\"hljs-attribute\">style</span>: <span class=\"hljs-string\">'./src/style/entry.js'</span>,\n  <span class=\"hljs-attribute\">script</span>: <span class=\"hljs-string\">'./src/script/entry.js'</span> <span class=\"hljs-comment\">// 新增入口文件</span>\n},\n...\n<span class=\"hljs-selector-tag\">resolveLoader</span>: { <span class=\"hljs-comment\">// 处理loader</span>\n  <span class=\"hljs-attribute\">alias</span>: {\n    <span class=\"hljs-string\">'copy'</span>: <span class=\"hljs-string\">'file-loader?name=[name].[ext]'</span>, <span class=\"hljs-comment\">//&amp;context=./src</span>\n  }\n},\n</code></pre>\n<p><code>npm start</code> 后会发现<code>/dist</code> 目录下<code>jquery.min.js</code>已经单独打包出来了</p>\n<h4 id=\"4-热加载\">4. 热加载</h4>\n<p>以BrowserSync为例：</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-symbol\">npm</span> i <span class=\"hljs-keyword\">browser-sync </span><span class=\"hljs-keyword\">browser-sync-webpack-plugin </span>--save-dev\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> BrowserSyncPlugin   = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'browser-sync-webpack-plugin'</span>)\n\n<span class=\"hljs-keyword\">let</span> config = {\n <span class=\"hljs-attr\">watch</span>: <span class=\"hljs-literal\">true</span>,\n <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> BrowserSyncPlugin(\n      <span class=\"hljs-comment\">// BrowserSync options </span>\n      {\n        <span class=\"hljs-comment\">// browse to http://localhost:3000/ during development </span>\n        host: <span class=\"hljs-string\">'localhost'</span>,\n        <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">4000</span>,\n        <span class=\"hljs-comment\">// proxy the Webpack Dev Server endpoint </span>\n        <span class=\"hljs-comment\">// (which should be serving on http://localhost:3100/) </span>\n        <span class=\"hljs-comment\">// through BrowserSync </span>\n        <span class=\"hljs-comment\">// proxy: 'http://localhost:3100/'</span>\n        server: { \n          <span class=\"hljs-attr\">baseDir</span>: [<span class=\"hljs-string\">'dist'</span>],\n          <span class=\"hljs-attr\">directory</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">// with directory listing</span>\n        }\n      },\n      <span class=\"hljs-comment\">// plugin options </span>\n      {\n        <span class=\"hljs-comment\">// prevent BrowserSync from reloading the page </span>\n        <span class=\"hljs-comment\">// and let Webpack Dev Server take care of this </span>\n        reload: <span class=\"hljs-literal\">true</span>\n      }\n    )\n  ]\n}\n</code></pre>\n<p>会自动打开浏览器访问<code>http://localhost:4000/</code>, 修改被打包的文件会自动刷新</p>\n<h4 id=\"5-配置stylus和babel\">5. 配置stylus和babel</h4>\n<pre><code class=\"lang-bash\"><span class=\"hljs-symbol\">npm</span> i autoprefixer nib poststylus <span class=\"hljs-keyword\">babel-core </span><span class=\"hljs-keyword\">babel-loader </span><span class=\"hljs-keyword\">babel-plugin-transform-runtime </span><span class=\"hljs-keyword\">babel-preset-es2015 </span>--save-dev\n</code></pre>\n<pre><code class=\"lang-stylus\">/<span class=\"hljs-regexp\">/ ./src</span><span class=\"hljs-regexp\">/style/variables</span>.styl\nblue = <span class=\"hljs-comment\">#0073aa</span>\n</code></pre>\n<pre><code class=\"lang-stylus\"><span class=\"hljs-comment\">// ./src/style/main.styl</span>\n<span class=\"hljs-selector-tag\">h1</span>\n  <span class=\"hljs-attribute\">color</span> blue\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> poststylus = require(<span class=\"hljs-string\">'poststylus'</span>)\n...\nplugin<span class=\"hljs-variable\">s:</span> [\n    <span class=\"hljs-keyword\">new</span> webpack.LoaderOptionsPlugin({\n      // tes<span class=\"hljs-variable\">t:</span> /\\.xxx$/, // may apply this <span class=\"hljs-keyword\">only</span> <span class=\"hljs-keyword\">for</span> some modules\n      option<span class=\"hljs-variable\">s:</span> {\n        stylu<span class=\"hljs-variable\">s:</span> {\n          use: [\n            poststylus([ <span class=\"hljs-string\">'autoprefixer'</span> ]),\n          ],\n          impor<span class=\"hljs-variable\">t:</span> [\n            <span class=\"hljs-string\">'~nib/index.styl'</span>,\n            path.<span class=\"hljs-keyword\">join</span>(__dirname, <span class=\"hljs-string\">'src/style/variables.styl'</span>)\n          ]\n        },\n        babe<span class=\"hljs-variable\">l:</span> {\n          preset<span class=\"hljs-variable\">s:</span> [<span class=\"hljs-string\">'es2015'</span>],\n          plugin<span class=\"hljs-variable\">s:</span> [<span class=\"hljs-string\">'transform-runtime'</span>]\n        }\n      }\n    }),\n    ...\n  ]\n</code></pre>\n<p><code>autoprefixer</code>是个自动添加前缀的插件，<code>nib</code>是一个不错的css库，<code>variables.styl</code>可以作为stylus的全局变量加载，babel不用说，可以写es6的代码。</p>\n<h3 id=\"总结\">总结</h3>\n<p>感觉把以上说的走一遍，webpack基本的配置就可以熟悉了，会引入loader，配置loader选项，会设置alias，会用plugins差不多。</p>\n<p>至于现在一些比较大的项目中分多个配置文件，是根据不同的场景拆分开的，基本的一个<code>webpack.base.config.js</code>,主要包含<code>loader</code>，<code>resolve</code>等全局通用的部分，剩下的根据开发或者生产环境分成<code>webpack.dev.config.js</code>，<code>webpack.prod.config.js</code>，除了都会合并base的内容，其他可能跟去环境不一样像<code>output</code>， <code>plugins</code>也都有所不同。</p>\n<p>另外，我说的不是很详细，有些东西还要自己去踩坑，比如loader和plugins的配置可以看官方文档，我没有详细说。</p>\n","excerptMarkdown":"本文从一个小Demo开始，通过不断增加功能来说明webpack的基本配置，只针对新手，也欢迎指正错误。","excerpt":"<p>本文从一个小Demo开始，通过不断增加功能来说明webpack的基本配置，只针对新手，也欢迎指正错误。</p>\n","status":"Published","lastEditTime":"2017-07-23","createTime":"2017-04-18","tags":["Webpack"],"visits":30,"id":"58f76feaac83368eb2ffdbbb"},{"_id":"59742253bf62d419736bca00","title":"新的博客正式上线","path":"new-blog","toc":"<ul id='toc'>\n<li><a href=\"#开发环境\">开发环境</a></li>\n<li><a href=\"#技术栈\">技术栈</a><ul><li><a href=\"#后端\">后端：</a></li>\n<li><a href=\"#前端\">前端：</a></li>\n<li><a href=\"#服务器端\">服务器端：</a></li>\n<li><a href=\"#cdn\">CDN：</a></li></ul>\n</li>\n<li><a href=\"#usage\">Usage</a><ul><li><a href=\"#安装-node\">安装 Node</a></li>\n<li><a href=\"#安装-mongodb\">安装 MongoDB</a></li>\n<li><a href=\"#安装-redis\">安装 Redis</a></li>\n<li><a href=\"#安装-pm2\">安装 pm2</a></li>\n<li><a href=\"#安装依赖\">安装依赖</a></li>\n<li><a href=\"#运行服务端\">运行服务端</a><ul><li><a href=\"#配置\">配置</a></li>\n<li><a href=\"#运行\">运行</a></li>\n<li><a href=\"#说明\">说明</a></li></ul>\n</li>\n<li><a href=\"#运行客户端\">运行客户端</a><ul><li><a href=\"#配置\">配置</a></li>\n<li><a href=\"#运行\">运行</a></li>\n<li><a href=\"#说明\">说明</a></li></ul>\n</li>\n<li><a href=\"#配置服务器\">配置服务器</a><ul><li><a href=\"#nginx\">Nginx</a></li>\n<li><a href=\"#获取-let39s-encyrpt-证书\">获取 Let&#39;s Encyrpt 证书</a></li></ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#更新日志\">更新日志</a><ul><li><a href=\"#201767\">2017.6.7</a></li>\n<li><a href=\"#201768\">2017.6.8</a></li>\n<li><a href=\"#201712\">2017.12</a></li>\n<li><a href=\"#2017722\">2017.7.22</a></li></ul>\n</li>\n<li><a href=\"#todo\">TODO</a></li>\n</ul>","markdown":"这是一个vue的练手项目，也是koa的练手项目。\n这是一个js写的完整的博客系统。\n这是一个前后端分离 + 服务端渲染的博客系统。\n这是一个前端 SPA + 后端 RESTful API 的博客系统。\n这是一个为了找实习做的个人作品，虽然是在找完实习后完成的。\n这是我以后的试验田，也是个人分享的平台。\n当然还有很多不足，今后会逐渐完善。\n\n### 开发环境\n\n* MacOS + iTerm2 + Sublime（前期） + Atom（后期）\n* Node v7.7.0 + MongoDB + Redis\n\n### 技术栈\n\n##### 后端：\n\n* 服务器 Koa2\n* 路由 Koa-Router\n* 数据库 MongoDB + Mongoose\n* 权限验证 Redis + JWT\n* 日志 log4js\n* 测试 mocha + chai\n\n##### 前端：\n\n* 单页应用 Vue2 \n* 状态管理 Vuex\n* 前端路由 Vue-Router \n* 服务端渲染 Express \n* Markdown生成目录 + 渲染 marked + uslug + highlight.js\n* 通信库 axios\n* 缓存 lru-cache\n\n##### 服务器端：\n\n* 腾讯云 Ubuntu 16.04\n* 守护进程 pm2\n* 反向代理 Nginx\n* ssl证书 acme-tiny自动化脚本\n\n##### CDN：\n\n* netlify（免费 + 支持https + 支持 github repo导入）\n\n### Usage\n\n#### 安装 Node\n\n推荐使用 [NVM](https://github.com/creationix/nvm) 管理Node版本，我的开发版本是 v7.7.0\n\n#### 安装 MongoDB\n\n* [Ubuntu上安装](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/)\n* [国内推荐阿里云镜像安装](http://www.linuxdiyf.com/linux/26151.html)\n* [Mac上安装](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/)\n\n貌似Ubuntu上有些坑，比如用官网的教程安装巨慢，可能被墙了，推荐阿里云镜像，后面写一篇记录一下吧。\n#### 安装 Redis\n\n* [Ubuntu](http://blog.fens.me/linux-redis-install/)\n* [Mac](http://blog.csdn.net/pingpangbing0902/article/details/47104545)\n\n还是Homebrew方便啊，网上找的一个教程，应该没问题\n\n#### 安装 pm2\n\n```bash\nnpm i -g pm2\n```\n用法: [github](https://github.com/Unitech/pm2#commands-overview)\n\n#### 安装依赖\n\n在`client` 和 `server` 目录下分别运行\n\n```bash\nnpm i\n```\n#### 运行服务端\n\n##### 配置\n\n```javascript\n// config/index.js\nexport default {\n  admin: { // 管理后台用户名，密码\n    name: 'yourname', \n    passwd: 'yourpassword'\n  },\n  mongoDB: 'mongodb://localhost/blog', // mongoDB数据库连接uri\n  redis: { // Redis\n    host: '127.0.0.1',\n    port: 6379\n  },\n  port: process.env.PORT || 3000, // 服务器运行端口\n  authSecret: 'blogAuth', // 验证密钥\n  expiresIn: 60 * 60, // JWT token 保存时间 1h\n}\n```\n\n##### 运行\n\n```bash\nnpm run start\n\n// pm2\nnpm run pm\n```\n\n##### 说明\n\n* 增加了pm script：`\"NODE_ENV=production pm2 start entry.js --name='blogServer'\"`, 方便部署\n* JWT 的token expiresIn 代表在redis中的存储时间，在有效期内可以通过admin后台进行各种操作，过期了需要重新登录生成token\n* API访问时统一加前缀api，比如查看公开文章[https://www.xiao555.com.cn/api/articles?status=Published](https://www.xiao555.com.cn/api/articles?status=Published)\n* 生产环境下log输出到`log/cheese.log`，格式如下：\n```javascript\n[2017-06-09 19:19:50.579] [INFO] Blog - Redis is ready\n[2017-06-09 19:19:50.602] [INFO] Blog - Connected to localhost:27017/blog\n[2017-06-09 19:19:50.605] [INFO] Blog - Server started on port 3000\n[2017-06-09 19:20:22.140] [INFO] Blog - GET /api/ 404 - 7ms\n[2017-06-09 19:20:29.507] [INFO] Blog - GET /api/articles、 404 - 2ms\n[2017-06-09 19:20:33.603] [INFO] Blog - GET /api/articles/ 200 - 14ms\n[2017-06-09 19:23:34.390] [INFO] Blog - POST /api/admin/login 200 - 55ms\n```\n\n#### 运行客户端\n\n##### 配置\n\n暂时硬编码上，后面放到数据库，通过admin后台来修改\n```javascript\n// config/index.js\nexport default {\n  dev: { // dev 环境下相关链接\n    api: 'http://localhost:3000/api',\n    siteInfo: {\n      siteUrl: 'http://localhost:5050/',\n      postUrl: 'http://localhost:5050/posts/'\n    }\n  },\n  prod: { // 生产环境下相关链接\n    api: 'https://www.xiao555.com.cn/api',\n    siteInfo: {\n      siteUrl: 'https://www.xiao555.com.cn/',\n      postUrl: 'https://www.xiao555.com.cn/posts/'\n    }\n  },\n  links: { // 各种链接\n    github: \"https://github.com/xiao555\",\n    facebook: \"https://www.facebook.com/profile.php?id=100009127309661\",\n    email: \"mailto: zhangruiwu32@gmail.com\",\n    weibo: \"http://weibo.com/u/5315649743\",\n    zhihu: \"https://www.zhihu.com/people/zhang-rui-wu-50\",\n    rss: \"#\"\n  },\n  headerImg: \"https://xiao555.netlify.com/header.jpg\", // 头像\n  titleTemplate: \"%s | Xiao555's Blog\", // Vue-meta title 格式\n}\n```\n\n##### 运行\n```bash\n// dev\nnpm run dev\n\n// prod\nnpm run build && npm run start\n// pm\nnpm run build && npm run pm\n```\n\n##### 说明\n* 增加了pm script：`\"NODE_ENV=production pm2 start server.js --name='blogClient'\"`, 方便部署\n* dev 模式下，自动打开浏览器，支持热重载，跑在本地`8008`端口\n* prod 模式跑在本地`5050`端口\n* css预处理器用`stylus`，webpack默认打包`/src/assets/css/variables.styl`, 里面配置一些全局变量\n* 加载其他字体文件请参考`variables.styl`里的`font-face('Meta', 'FFMetaPro-Normal', 400)`，字体文件放在`/src/assets/font/`目录\n* admin管理后台通过`yoursite.com/admin`访问\n* 网站icon放在`public`目录下，通过`server.js`里的`app.use(favicon('./public/header.jpg'))`引入。\n\n#### 配置服务器\n##### Nginx\n安装时候记得要支持http2的，貌似现在直接安装的已经支持了？\n本站的nginx配置：\n```\nserver {\n    listen 443 ssl http2 default_server;\n    server_name xiao555.com.cn www.xiao555.com.cn;\n\n    ssl on;\n    ssl_certificate /root/ssl/chained.pem;\n    ssl_certificate_key /root/ssl/domain.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n    ssl_session_cache shared:SSL:50m;\n    ssl_dhparam /root/ssl/dhparams.pem;\n    ssl_prefer_server_ciphers on;\n\n    index index.php index.html;\n    location ^~ /api/ {\n        proxy_pass http://localhost:3000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_redirect off;\n    }\n\n    location ^~  /.well-known/acme-challenge/ {\n        alias /var/www/challenges/;\n        try_files $uri =404;\n    }\n\n    location / {\n        proxy_pass http://localhost:5050;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_redirect off;\n    }\n}\n\nserver {\n    listen 80;\n    server_name www.xiao555.com.cn xiao555.com.cn;\n\n    location ^~ /.well-known/acme-challenge/ {\n        alias /var/www/challenges/;\n        try_files $uri =404;\n    }\n}\n\nserver {\n    listen 80;\n    server_name xiao555.com.cn www.xiao555.com.cn;\n    index index.php index.html;\n    location ^~ / {\n        rewrite ^(.*)$  https://$host$request_uri;\n    }\n}\n```\n\n`/usr/local/nginx/conf/nginx.conf`，里其他的配置都删掉了，但是不知道为什么访问80端口不会转发, 无奈只好index.html强制刷新网页，在80端口会访问到的html里加上`<meta http-equiv=\"refresh\" content=\"0;url=https://www.xiao555.com.cn/\">` \n\n#####  获取 Let's Encyrpt 证书\n这是一个免费的ssl证书，通过[acme-tiny](https://github.com/diafygi/acme-tiny)脚本自动化获取, 简单说一下步骤：\n1. 创建帐号\n\t首先创建一个目录用来放生成的各种东西，我是在`~/ssl`目录下。创建一个 RSA 私钥用于 Let's Encrypt 识别你的身份：\n\t\n\t```\n\topenssl genrsa 4096 > account.key\n\t```\n2.  创建 CSR 文件\n\t生成 CSR（Certificate Signing Request，证书签名请求）文件：\n\n\t```\n\topenssl genrsa 4096 > domain.key\n\topenssl req -new -sha256 -key domain.key -subj \"/CN=yoursite.com\" > domain.csr\n\t```\n3. 配置验证服务\n\t创建建用于存放验证文件的目录：\n\t\n\t```\n\tmkdir -p /var/www/challenges/\n\t```\n\t配置服务器(Nginx为例)：\n\t\n\t```\n\t#example for nginx\n\tserver {\n\t    listen 80;\n\t    server_name yoursite.com www.yoursite.com;\n\t\n\t    location /.well-known/acme-challenge/ {\n\t        alias /var/www/challenges/;\n\t        try_files $uri =404;\n\t    }\n\t\n\t    ...the rest of your config\n\t}\n\t```\n\t也可以看我nginx的配置，主要就是访问`/.well-known/acme-challenge/`的时候能访问到`/var/www/challenges/`目录\n4. 获取网站证书\n\t先下载 acme-tiny 脚本：\n\t\n\t```\n\twget https://raw.githubusercontent.com/diafygi/acme-tiny/master/acme_tiny.py\n\t```\n\t指定账户私钥、CSR 以及验证目录，执行脚本：\n\t\n\t```\n\tpython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/www/challenges/ > ./signed.crt\n\t```\n\t下载 Let's Encrypt 的中间证书：\n\t\n\t```\n\twget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\ncat signed.crt intermediate.pem > chained.pem\n\t```\n5.  Nginx 配置\n\t\n\t```\n\tserver {\n\t    listen 443;\n\t    server_name yoursite.com, www.yoursite.com;\n\t\n\t    ssl on;\n\t    ssl_certificate /path/to/chained.pem;\n\t    ssl_certificate_key /path/to/domain.key;\n\t    ssl_session_timeout 5m;\n\t    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n\t    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n\t    ssl_session_cache shared:SSL:50m;\n\t    # openssl dhparam -out dhparams.pem 2048\n\t    ssl_dhparam /path/to/dhparams.pem;\n\t    ssl_prefer_server_ciphers on;\n\t\n\t    ...the rest of your config\n\t}\n\t\n\tserver {\n\t    listen 80;\n\t    server_name yoursite.com, www.yoursite.com;\n\t\n\t    location /.well-known/acme-challenge/ {\n\t        alias /var/www/challenges/;\n\t        try_files $uri =404;\n\t    }\n\t\n\t    ...the rest of your config\n\t}\n\t```\n\t那个dhparams.pem是增强安全性的，用`openssl dhparam -out dhparams.pem 2048`生成就可以\n6.  配置脚本自动更新\n\tLet's Encrypt 签发的证书只有 90 天有效期，所以创建一个脚本自动更新\n\t\n\t```\n\t# renew_cert.sh\n\tcd ~/ssl/\n\tpython acme_tiny.py --account-key account.key --csr domain.csr --acme-dir /var/www/challenges/ > signed.crt || exit\n\twget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\n\tcat signed.crt intermediate.pem > chained.pem\n\tnginx -s reload\n\t```\n\t通过 `chmod a+x renew_cert.sh` 赋予执行权限。\n\t`crontab -e `加入以下内容：\n\t\n\t```\n\t0 0 1 * * ~/ssl/renew_cert.sh >/dev/null 2>&1\n\t```\n\t这样以后证书每个月都会自动更新\n\t\n### 更新日志\n\n之前做的时候没有记录，所以说一下大体流程吧。\n这个项目是从服务端开始开发的，先是要搭建一个RESTful API的服务器，用Mocha + chai 测试功能。\n后端功能实现后，开始搞前端，一开始是用vue-cli搭的脚手架，而且admin跟client是分开相互独立的，先开发的admin，最后是client。\n开发过程中对`build`目录下的webpack配置文件修改了很多次，结合`vue-hackernews-2.0`加入了服务端渲染的功能，并去掉了dev开发模式的配置。\n随着前端功能的增多也在不断修改后端逻辑，最终形成了beta版本——[github](https://github.com/xiao555/New-Blog/tree/c8b6e2d909f284d10a484272ac215043978900ed), 后面因为其他事情就没再搞。\n\n在考完java和算法之后，花了两三天才把之前的半成品完善了一下，改动如下：\n* 改为比较正常sidebar\n* 取消顶部导航菜单\n* markdown渲染弃用vue-markdown，自己用marked + highlight.js + uslug 打造一个语法高亮，能自动生成toc的组件\n* 取消了category和tag页面，增加archive页面\n* 构建工具上切换回dev模式，毕竟还要边改边看效果\n\n#### 2017.6.7\n* 实现Archive页面逻辑\n* 测试production环境下build & start 失败，只有外部css，没有组件内css，原因是都用`extract-text-webpack-plugin` 单独打包到`style.css`，外部css把组件内的覆盖掉了，解决办法：查询文档，用`const extractCSS = new ExtractTextPlugin('css/[name].css');`来实现Multiple Instances。\n* 用`vue-meta`实现title的自动更新，同时服务端`server.js`也要进行相应的修改，优化SEO\n\n#### 2017.6.8\n* 增加响应式布局\n* 服务器上跑了下，修复了部分依赖没有的问题\n* 发现admin和client分开的话，部署运行都要各跑一遍，太麻烦，于是admin合并到client，重构后的client由blog和admin组成，也算同构了一下\n* 每个过程都在不断的优化代码结构，明天把一些配置项整合出来，统一管理\n\n#### 2017.12\n这两天太浪了~\n* 增加文章阅读计数功能\n* 配置项统一在 `config/index.js` 里\n* 部署后发现https图标不是绿色的，以为我的免费Let's Encrypt 证书有问题...最后搞了半天发现是因为有http的图片外链，图片之前放在七牛上的，打算服务器上搞一波，再看看有没有什么好的支持https的CDN\n* 调试服务器过程中发现我的网页加载有点慢，主要是生成的`app.js`太大了，有1M多，后面可以优化一下，减少依赖库的使用，发现一个`highlight.js`就占了三四百K。\n\n所以后面主要任务是解决一下http外链的问题，优化一下性能。\n\n* 外链问题解决了，用的[netlify](https://www.netlify.com/)，可以直接导入github的repo，很方便，就是国外的有点慢\n\n#### 2017.7.22\n趁周末在公司做些自己的事23333\n之前分析了提高性能的一些方法，主要是减少打包生成的app.js的体积，这次更新前运行`npm run build`的结果是这样的：\n\n```bash\nTotal precache size is about 2.75 MB for 12 resources.\nHash: 8a46e668ed80f8d7a493\nVersion: webpack 2.6.1\nTime: 32802ms\n                                         Asset       Size  Chunks                    Chunk Names\n    static/fonts/FFMetaPro-Normal.ec7ccf1.woff    71.7 kB          [emitted]\n    static/img/fontawesome-webfont.912ec66.svg     444 kB          [emitted]  [big]\n  static/fonts/fontawesome-webfont.b06871f.ttf     166 kB          [emitted]\nstatic/fonts/fontawesome-webfont.af7ae50.woff2    77.2 kB          [emitted]\n static/fonts/fontawesome-webfont.fee66e7.woff      98 kB          [emitted]\n       static/img/FFMetaPro-Normal.5d836bf.svg    2.12 MB          [emitted]  [big]\n     static/fonts/FFMetaPro-Normal.4eebf0c.eot     200 kB          [emitted]\n     static/fonts/FFMetaPro-Normal.3767f35.ttf     199 kB          [emitted]\n  static/fonts/fontawesome-webfont.674f50d.eot     166 kB          [emitted]\n                                        app.js    1.27 MB       0  [emitted]  [big]  app\n                                     vendor.js  810 bytes       1  [emitted]         vendor\n                                      style.js  263 bytes       2  [emitted]         style\n                                   manifest.js    1.39 kB       3  [emitted]         manifest\n                                   css/app.css    27.5 kB       0  [emitted]         app\n                                 css/style.css    39.1 kB       2  [emitted]         style\n                                    index.html    1.26 kB          [emitted]\n\n> client@1.0.0 build:server /var/www/New-Blog/client\n> cross-env NODE_ENV=production webpack --config build/webpack.server.config.js --progress --hide-modules\n\nHash: c1685fd6bd9a9bb148a6\nVersion: webpack 2.6.1\nTime: 9352ms\n              Asset     Size  Chunks                    Chunk Names\nvue-ssr-bundle.json  1.72 MB          [emitted]  [big]\n```\n\n可以看到一个app.js就占了1.27MB, 此时网页加载的情况是这样的:\n![](https://xiao555.netlify.com/preyouhua.jpg)\n然后我看了一下别人的app.js，压缩后基本都是几十k大小，而我是几百k，所以app.js的大小是一个优化点，在分析了为何app.js这么大后，我进行了如下优化：\n\n* 减少对这些库的依赖，'marked','highlight.js','uslug', 'vuejs-datepicker', 'Vuex'\n* markdown 渲染放在server端进行，article Model增加存放markdown的字段，对数据库中的旧数据创建Migration脚本\n\n优化后运行`npm run build`的结果是这样的：\n```bash\nTotal precache size is about 1.63 MB for 12 resources.\nHash: 85db4cfa5f72482c3c59\nVersion: webpack 2.3.0\nTime: 10386ms\n                                         Asset       Size  Chunks                    Chunk Names\n                                        app.js     203 kB       0  [emitted]         app\n    static/img/fontawesome-webfont.912ec66.svg     444 kB          [emitted]  [big]\n  static/fonts/fontawesome-webfont.b06871f.ttf     166 kB          [emitted]\nstatic/fonts/fontawesome-webfont.af7ae50.woff2    77.2 kB          [emitted]\n static/fonts/fontawesome-webfont.fee66e7.woff      98 kB          [emitted]\n       static/img/FFMetaPro-Normal.5d836bf.svg    2.12 MB          [emitted]  [big]\n     static/fonts/FFMetaPro-Normal.4eebf0c.eot     200 kB          [emitted]\n     static/fonts/FFMetaPro-Normal.3767f35.ttf     199 kB          [emitted]\n    static/fonts/FFMetaPro-Normal.ec7ccf1.woff    71.7 kB          [emitted]\n  static/fonts/fontawesome-webfont.674f50d.eot     166 kB          [emitted]\n                                     vendor.js  810 bytes       1  [emitted]         vendor\n                                      style.js  253 bytes       2  [emitted]         style\n                                   manifest.js    1.38 kB       3  [emitted]         manifest\n                                   css/app.css    22.1 kB       0  [emitted]         app\n                                 css/style.css    39.2 kB       2  [emitted]         style\n                               css/app.css.map    29.6 kB       0  [emitted]         app\n                             css/style.css.map    36.1 kB       2  [emitted]         style\n                                    index.html    1.23 kB          [emitted]\n\n> client@1.0.0 build:server /Users/zhangruiwu/Desktop/demo-learn/newBlog/client\n> cross-env NODE_ENV=production webpack --config build/webpack.server.config.js --progress --hide-modules\n\nHash: 5b9d7f18053508c4e7a5\nVersion: webpack 2.3.0\nTime: 4008ms\n              Asset    Size  Chunks                    Chunk Names\nvue-ssr-bundle.json  556 kB          [emitted]  [big]\n```\n\n效果显著，可以看到总大小由2.75 MB减小的1.63 MB， app.js由1.27 MB减小到203 kB， vue-ssr-bundle.json也从1.72 MB减小到556 kB。我们再看看部署到服务器后网页加载情况：\n![](https://xiao555.netlify.com/afteryouhua.jpg)\n效果显著有没有，Load从4.15s减小到了1.31s，如果再要优化的话，其实也就是减少请求数，然后优化一下头像的处理，想到两种方案，一种换成base64，结果发现app.js变大了许多，编码有点多。第二种换成webp格式，效果如下：\n![](https://xiao555.netlify.com/afterwebp.jpg)\n加载速度减小的1s以内了。\n\n后面再该合并的合并，cdn的cdn，首屏加载性能方面的问题就基本解决的差不多了。先睡觉了==！\n\n### TODO\n\n* 文章列表分页\n* 评论区\n* 管理后台界面优化，目前是仿WordPress\n* 重构，改成同构Web应用\n* 服务器端（腾讯云）的优化\n\n","content":"<p>这是一个vue的练手项目，也是koa的练手项目。\n这是一个js写的完整的博客系统。\n这是一个前后端分离 + 服务端渲染的博客系统。\n这是一个前端 SPA + 后端 RESTful API 的博客系统。\n这是一个为了找实习做的个人作品，虽然是在找完实习后完成的。\n这是我以后的试验田，也是个人分享的平台。\n当然还有很多不足，今后会逐渐完善。</p>\n<h3 id=\"开发环境\">开发环境</h3>\n<ul>\n<li>MacOS + iTerm2 + Sublime（前期） + Atom（后期）</li>\n<li>Node v7.7.0 + MongoDB + Redis</li>\n</ul>\n<h3 id=\"技术栈\">技术栈</h3>\n<h5 id=\"后端\">后端：</h5>\n<ul>\n<li>服务器 Koa2</li>\n<li>路由 Koa-Router</li>\n<li>数据库 MongoDB + Mongoose</li>\n<li>权限验证 Redis + JWT</li>\n<li>日志 log4js</li>\n<li>测试 mocha + chai</li>\n</ul>\n<h5 id=\"前端\">前端：</h5>\n<ul>\n<li>单页应用 Vue2 </li>\n<li>状态管理 Vuex</li>\n<li>前端路由 Vue-Router </li>\n<li>服务端渲染 Express </li>\n<li>Markdown生成目录 + 渲染 marked + uslug + highlight.js</li>\n<li>通信库 axios</li>\n<li>缓存 lru-cache</li>\n</ul>\n<h5 id=\"服务器端\">服务器端：</h5>\n<ul>\n<li>腾讯云 Ubuntu 16.04</li>\n<li>守护进程 pm2</li>\n<li>反向代理 Nginx</li>\n<li>ssl证书 acme-tiny自动化脚本</li>\n</ul>\n<h5 id=\"cdn\">CDN：</h5>\n<ul>\n<li>netlify（免费 + 支持https + 支持 github repo导入）</li>\n</ul>\n<h3 id=\"usage\">Usage</h3>\n<h4 id=\"安装-node\">安装 Node</h4>\n<p>推荐使用 <a href=\"https://github.com/creationix/nvm\">NVM</a> 管理Node版本，我的开发版本是 v7.7.0</p>\n<h4 id=\"安装-mongodb\">安装 MongoDB</h4>\n<ul>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-ubuntu/\">Ubuntu上安装</a></li>\n<li><a href=\"http://www.linuxdiyf.com/linux/26151.html\">国内推荐阿里云镜像安装</a></li>\n<li><a href=\"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/\">Mac上安装</a></li>\n</ul>\n<p>貌似Ubuntu上有些坑，比如用官网的教程安装巨慢，可能被墙了，推荐阿里云镜像，后面写一篇记录一下吧。</p>\n<h4 id=\"安装-redis\">安装 Redis</h4>\n<ul>\n<li><a href=\"http://blog.fens.me/linux-redis-install/\">Ubuntu</a></li>\n<li><a href=\"http://blog.csdn.net/pingpangbing0902/article/details/47104545\">Mac</a></li>\n</ul>\n<p>还是Homebrew方便啊，网上找的一个教程，应该没问题</p>\n<h4 id=\"安装-pm2\">安装 pm2</h4>\n<pre><code class=\"lang-bash\">npm <span class=\"hljs-selector-tag\">i</span> -g pm2\n</code></pre>\n<p>用法: <a href=\"https://github.com/Unitech/pm2#commands-overview\">github</a></p>\n<h4 id=\"安装依赖\">安装依赖</h4>\n<p>在<code>client</code> 和 <code>server</code> 目录下分别运行</p>\n<pre><code class=\"lang-bash\"><span class=\"hljs-built_in\">npm</span> i\n</code></pre>\n<h4 id=\"运行服务端\">运行服务端</h4>\n<h5 id=\"配置\">配置</h5>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// config/index.js</span>\n<span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">default</span> {\n  <span class=\"hljs-attribute\">admin</span>: { <span class=\"hljs-comment\">// 管理后台用户名，密码</span>\n    <span class=\"hljs-attribute\">name</span>: <span class=\"hljs-string\">'yourname'</span>, \n    <span class=\"hljs-attribute\">passwd</span>: <span class=\"hljs-string\">'yourpassword'</span>\n  },\n  <span class=\"hljs-attribute\">mongoDB</span>: <span class=\"hljs-string\">'mongodb://localhost/blog'</span>, <span class=\"hljs-comment\">// mongoDB数据库连接uri</span>\n  <span class=\"hljs-attribute\">redis</span>: { <span class=\"hljs-comment\">// Redis</span>\n    <span class=\"hljs-attribute\">host</span>: <span class=\"hljs-string\">'127.0.0.1'</span>,\n    <span class=\"hljs-attribute\">port</span>: <span class=\"hljs-number\">6379</span>\n  },\n  <span class=\"hljs-attribute\">port</span>: process.env.PORT || <span class=\"hljs-number\">3000</span>, <span class=\"hljs-comment\">// 服务器运行端口</span>\n  <span class=\"hljs-attribute\">authSecret</span>: <span class=\"hljs-string\">'blogAuth'</span>, <span class=\"hljs-comment\">// 验证密钥</span>\n  <span class=\"hljs-attribute\">expiresIn</span>: <span class=\"hljs-number\">60</span> * <span class=\"hljs-number\">60</span>, <span class=\"hljs-comment\">// JWT token 保存时间 1h</span>\n}\n</code></pre>\n<h5 id=\"运行\">运行</h5>\n<pre><code class=\"lang-bash\">npm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> start\n</span>\n// pm2\nnpm <span class=\"hljs-keyword\">run</span><span class=\"bash\"> pm</span>\n</code></pre>\n<h5 id=\"说明\">说明</h5>\n<ul>\n<li>增加了pm script：<code>&quot;NODE_ENV=production pm2 start entry.js --name=&#39;blogServer&#39;&quot;</code>, 方便部署</li>\n<li>JWT 的token expiresIn 代表在redis中的存储时间，在有效期内可以通过admin后台进行各种操作，过期了需要重新登录生成token</li>\n<li>API访问时统一加前缀api，比如查看公开文章<a href=\"https://www.xiao555.com.cn/api/articles?status=Published\">https://www.xiao555.com.cn/api/articles?status=Published</a></li>\n<li>生产环境下log输出到<code>log/cheese.log</code>，格式如下：<pre><code class=\"lang-javascript\">[2017-06-09 19:19:50.579] [<span class=\"hljs-builtin-name\">INFO</span>] Blog - Redis is ready\n[2017-06-09 19:19:50.602] [<span class=\"hljs-builtin-name\">INFO</span>] Blog - Connected <span class=\"hljs-keyword\">to</span> localhost:27017/blog\n[2017-06-09 19:19:50.605] [<span class=\"hljs-builtin-name\">INFO</span>] Blog -<span class=\"hljs-built_in\"> Server </span>started on<span class=\"hljs-built_in\"> port </span>3000\n[2017-06-09 19:20:22.140] [<span class=\"hljs-builtin-name\">INFO</span>] Blog - <span class=\"hljs-builtin-name\">GET</span> /api/ 404 - 7ms\n[2017-06-09 19:20:29.507] [<span class=\"hljs-builtin-name\">INFO</span>] Blog - <span class=\"hljs-builtin-name\">GET</span> /api/articles、 404 - 2ms\n[2017-06-09 19:20:33.603] [<span class=\"hljs-builtin-name\">INFO</span>] Blog - <span class=\"hljs-builtin-name\">GET</span> /api/articles/ 200 - 14ms\n[2017-06-09 19:23:34.390] [<span class=\"hljs-builtin-name\">INFO</span>] Blog - POST /api/admin/login 200 - 55ms\n</code></pre>\n</li>\n</ul>\n<h4 id=\"运行客户端\">运行客户端</h4>\n<h5 id=\"配置\">配置</h5>\n<p>暂时硬编码上，后面放到数据库，通过admin后台来修改</p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-comment\">// config/index.js</span>\n<span class=\"hljs-selector-tag\">export</span> <span class=\"hljs-selector-tag\">default</span> {\n  <span class=\"hljs-attribute\">dev</span>: { <span class=\"hljs-comment\">// dev 环境下相关链接</span>\n    <span class=\"hljs-attribute\">api</span>: <span class=\"hljs-string\">'http://localhost:3000/api'</span>,\n    <span class=\"hljs-attribute\">siteInfo</span>: {\n      <span class=\"hljs-attribute\">siteUrl</span>: <span class=\"hljs-string\">'http://localhost:5050/'</span>,\n      <span class=\"hljs-attribute\">postUrl</span>: <span class=\"hljs-string\">'http://localhost:5050/posts/'</span>\n    }\n  },\n  <span class=\"hljs-attribute\">prod</span>: { <span class=\"hljs-comment\">// 生产环境下相关链接</span>\n    <span class=\"hljs-attribute\">api</span>: <span class=\"hljs-string\">'https://www.xiao555.com.cn/api'</span>,\n    <span class=\"hljs-attribute\">siteInfo</span>: {\n      <span class=\"hljs-attribute\">siteUrl</span>: <span class=\"hljs-string\">'https://www.xiao555.com.cn/'</span>,\n      <span class=\"hljs-attribute\">postUrl</span>: <span class=\"hljs-string\">'https://www.xiao555.com.cn/posts/'</span>\n    }\n  },\n  <span class=\"hljs-attribute\">links</span>: { <span class=\"hljs-comment\">// 各种链接</span>\n    <span class=\"hljs-attribute\">github</span>: <span class=\"hljs-string\">\"https://github.com/xiao555\"</span>,\n    <span class=\"hljs-attribute\">facebook</span>: <span class=\"hljs-string\">\"https://www.facebook.com/profile.php?id=100009127309661\"</span>,\n    <span class=\"hljs-attribute\">email</span>: <span class=\"hljs-string\">\"mailto: zhangruiwu32@gmail.com\"</span>,\n    <span class=\"hljs-attribute\">weibo</span>: <span class=\"hljs-string\">\"http://weibo.com/u/5315649743\"</span>,\n    <span class=\"hljs-attribute\">zhihu</span>: <span class=\"hljs-string\">\"https://www.zhihu.com/people/zhang-rui-wu-50\"</span>,\n    <span class=\"hljs-attribute\">rss</span>: <span class=\"hljs-string\">\"#\"</span>\n  },\n  <span class=\"hljs-attribute\">headerImg</span>: <span class=\"hljs-string\">\"https://xiao555.netlify.com/header.jpg\"</span>, <span class=\"hljs-comment\">// 头像</span>\n  <span class=\"hljs-attribute\">titleTemplate</span>: <span class=\"hljs-string\">\"%s | Xiao555's Blog\"</span>, <span class=\"hljs-comment\">// Vue-meta title 格式</span>\n}\n</code></pre>\n<h5 id=\"运行\">运行</h5>\n<pre><code class=\"lang-bash\"><span class=\"hljs-comment\">// dev</span>\nnpm <span class=\"hljs-built_in\">run</span> dev\n\n<span class=\"hljs-comment\">// prod</span>\nnpm <span class=\"hljs-built_in\">run</span> build &amp;&amp; npm <span class=\"hljs-built_in\">run</span> start\n<span class=\"hljs-comment\">// pm</span>\nnpm <span class=\"hljs-built_in\">run</span> build &amp;&amp; npm <span class=\"hljs-built_in\">run</span> pm\n</code></pre>\n<h5 id=\"说明\">说明</h5>\n<ul>\n<li>增加了pm script：<code>&quot;NODE_ENV=production pm2 start server.js --name=&#39;blogClient&#39;&quot;</code>, 方便部署</li>\n<li>dev 模式下，自动打开浏览器，支持热重载，跑在本地<code>8008</code>端口</li>\n<li>prod 模式跑在本地<code>5050</code>端口</li>\n<li>css预处理器用<code>stylus</code>，webpack默认打包<code>/src/assets/css/variables.styl</code>, 里面配置一些全局变量</li>\n<li>加载其他字体文件请参考<code>variables.styl</code>里的<code>font-face(&#39;Meta&#39;, &#39;FFMetaPro-Normal&#39;, 400)</code>，字体文件放在<code>/src/assets/font/</code>目录</li>\n<li>admin管理后台通过<code>yoursite.com/admin</code>访问</li>\n<li>网站icon放在<code>public</code>目录下，通过<code>server.js</code>里的<code>app.use(favicon(&#39;./public/header.jpg&#39;))</code>引入。</li>\n</ul>\n<h4 id=\"配置服务器\">配置服务器</h4>\n<h5 id=\"nginx\">Nginx</h5>\n<p>安装时候记得要支持http2的，貌似现在直接安装的已经支持了？\n本站的nginx配置：</p>\n<pre><code><span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">443</span> ssl http2 default_server;\n    <span class=\"hljs-attribute\">server_name</span> xiao555.com.cn www.xiao555.com.cn;\n\n    <span class=\"hljs-attribute\">ssl</span> <span class=\"hljs-literal\">on</span>;\n    <span class=\"hljs-attribute\">ssl_certificate</span> /root/ssl/chained.pem;\n    <span class=\"hljs-attribute\">ssl_certificate_key</span> /root/ssl/domain.key;\n    <span class=\"hljs-attribute\">ssl_session_timeout</span> <span class=\"hljs-number\">5m</span>;\n    <span class=\"hljs-attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"hljs-number\">1</span> TLSv1.<span class=\"hljs-number\">2</span>;\n    <span class=\"hljs-attribute\">ssl_ciphers</span> ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n    <span class=\"hljs-attribute\">ssl_session_cache</span> shared:SSL:<span class=\"hljs-number\">50m</span>;\n    <span class=\"hljs-attribute\">ssl_dhparam</span> /root/ssl/dhparams.pem;\n    <span class=\"hljs-attribute\">ssl_prefer_server_ciphers</span> <span class=\"hljs-literal\">on</span>;\n\n    <span class=\"hljs-attribute\">index</span> index.php index.html;\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span> /api/ {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:3000;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Host <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"hljs-attribute\">proxy_redirect</span> <span class=\"hljs-literal\">off</span>;\n    }\n\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span>  /.well-known/acme-challenge/ {\n        <span class=\"hljs-attribute\">alias</span> /var/www/challenges/;\n        <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> =<span class=\"hljs-number\">404</span>;\n    }\n\n    <span class=\"hljs-attribute\">location</span> / {\n        <span class=\"hljs-attribute\">proxy_pass</span> http://localhost:5050;\n        <span class=\"hljs-attribute\">proxy_set_header</span> Host <span class=\"hljs-variable\">$host</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n        <span class=\"hljs-attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"hljs-variable\">$proxy_add_x_forwarded_for</span>;\n        <span class=\"hljs-attribute\">proxy_redirect</span> <span class=\"hljs-literal\">off</span>;\n    }\n}\n\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> www.xiao555.com.cn xiao555.com.cn;\n\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span> /.well-known/acme-challenge/ {\n        <span class=\"hljs-attribute\">alias</span> /var/www/challenges/;\n        <span class=\"hljs-attribute\">try_files</span> <span class=\"hljs-variable\">$uri</span> =<span class=\"hljs-number\">404</span>;\n    }\n}\n\n<span class=\"hljs-section\">server</span> {\n    <span class=\"hljs-attribute\">listen</span> <span class=\"hljs-number\">80</span>;\n    <span class=\"hljs-attribute\">server_name</span> xiao555.com.cn www.xiao555.com.cn;\n    <span class=\"hljs-attribute\">index</span> index.php index.html;\n    <span class=\"hljs-attribute\">location</span><span class=\"hljs-regexp\"> ^~</span> / {\n        <span class=\"hljs-attribute\">rewrite</span><span class=\"hljs-regexp\"> ^(.*)$</span>  https://<span class=\"hljs-variable\">$host</span><span class=\"hljs-variable\">$request_uri</span>;\n    }\n}\n</code></pre><p><code>/usr/local/nginx/conf/nginx.conf</code>，里其他的配置都删掉了，但是不知道为什么访问80端口不会转发, 无奈只好index.html强制刷新网页，在80端口会访问到的html里加上<code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=https://www.xiao555.com.cn/&quot;&gt;</code> </p>\n<h5 id=\"获取-let39s-encyrpt-证书\">获取 Let&#39;s Encyrpt 证书</h5>\n<p>这是一个免费的ssl证书，通过<a href=\"https://github.com/diafygi/acme-tiny\">acme-tiny</a>脚本自动化获取, 简单说一下步骤：</p>\n<ol>\n<li><p>创建帐号\n 首先创建一个目录用来放生成的各种东西，我是在<code>~/ssl</code>目录下。创建一个 RSA 私钥用于 Let&#39;s Encrypt 识别你的身份：</p>\n<pre><code> openssl genrsa <span class=\"hljs-number\">4096</span> &gt; account.<span class=\"hljs-type\">key</span>\n</code></pre></li>\n<li><p>创建 CSR 文件\n生成 CSR（Certificate Signing Request，证书签名请求）文件：</p>\n<pre><code>openssl genrsa <span class=\"hljs-number\">4096</span> &gt; <span class=\"hljs-built_in\">domain</span>.<span class=\"hljs-built_in\">key</span>\nopenssl req -<span class=\"hljs-built_in\">new</span> -sha256 -<span class=\"hljs-built_in\">key</span> <span class=\"hljs-built_in\">domain</span>.<span class=\"hljs-built_in\">key</span> -subj <span class=\"hljs-string\">\"/CN=yoursite.com\"</span> &gt; <span class=\"hljs-built_in\">domain</span>.csr\n</code></pre></li>\n<li><p>配置验证服务\n 创建建用于存放验证文件的目录：</p>\n<pre><code> mkdir -p <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/challenges/</span>\n</code></pre><p> 配置服务器(Nginx为例)：</p>\n<pre><code> #example <span class=\"hljs-keyword\">for</span> nginx\n<span class=\"hljs-built_in\"> server </span>{\n     listen 80;\n     server_name yoursite.com www.yoursite.com;\n\n     location /.well-known/acme-challenge/ {\n         alias /var/www/challenges/;\n         try_files <span class=\"hljs-variable\">$uri</span> =404;\n     }\n\n     <span class=\"hljs-built_in\">..</span>.the rest of your<span class=\"hljs-built_in\"> config\n</span> }\n</code></pre><p> 也可以看我nginx的配置，主要就是访问<code>/.well-known/acme-challenge/</code>的时候能访问到<code>/var/www/challenges/</code>目录</p>\n</li>\n<li><p>获取网站证书\n 先下载 acme-tiny 脚本：</p>\n<pre><code> wget https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/diafygi/</span>acme-tiny<span class=\"hljs-regexp\">/master/</span>acme_tiny.py\n</code></pre><p> 指定账户私钥、CSR 以及验证目录，执行脚本：</p>\n<pre><code> python acme_tiny.py <span class=\"hljs-params\">--account-key</span> <span class=\"hljs-string\">./account.key</span> <span class=\"hljs-params\">--csr</span> <span class=\"hljs-string\">./domain.csr</span> <span class=\"hljs-params\">--acme-dir</span> <span class=\"hljs-string\">/var/www/challenges/</span> &gt; <span class=\"hljs-string\">./signed.crt</span>\n</code></pre><p> 下载 Let&#39;s Encrypt 的中间证书：</p>\n<pre><code> wget -O - https:<span class=\"hljs-comment\">//letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem</span>\ncat signed<span class=\"hljs-selector-class\">.crt</span> intermediate<span class=\"hljs-selector-class\">.pem</span> &gt; chained.pem\n</code></pre></li>\n<li><p>Nginx 配置</p>\n<pre><code>server {\n    listen 443;\n    server_name yoursite.com, www.yoursite.com;\n\n    ssl on;\n    ssl_certificate /path/<span class=\"hljs-keyword\">to</span>/chained.pem;\n    ssl_certificate_key /path/<span class=\"hljs-keyword\">to</span>/domain.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n    ssl_session_cache shared:SSL:50m;\n    # openssl dhparam -out dhparams.pem 2048\n    ssl_dhparam /path/<span class=\"hljs-keyword\">to</span>/dhparams.pem;\n    ssl_prefer_server_ciphers on;\n\n    <span class=\"hljs-built_in\">..</span>.the rest of your<span class=\"hljs-built_in\"> config\n</span>}\n<span class=\"hljs-built_in\">\nserver </span>{\n    listen 80;\n    server_name yoursite.com, www.yoursite.com;\n\n    location /.well-known/acme-challenge/ {\n        alias /var/www/challenges/;\n        try_files <span class=\"hljs-variable\">$uri</span> =404;\n    }\n\n    <span class=\"hljs-built_in\">..</span>.the rest of your<span class=\"hljs-built_in\"> config\n</span>}\n</code></pre><p>那个dhparams.pem是增强安全性的，用<code>openssl dhparam -out dhparams.pem 2048</code>生成就可以</p>\n</li>\n<li><p>配置脚本自动更新\nLet&#39;s Encrypt 签发的证书只有 90 天有效期，所以创建一个脚本自动更新</p>\n<pre><code><span class=\"hljs-comment\"># renew_cert.sh</span>\ncd ~<span class=\"hljs-regexp\">/ssl/</span>\npython acme_tiny.py --account-key account.key --csr domain.csr --acme-dir <span class=\"hljs-regexp\">/var/</span>www<span class=\"hljs-regexp\">/challenges/</span> &gt; signed.crt || <span class=\"hljs-keyword\">exit</span>\nwget -O - https:<span class=\"hljs-regexp\">//</span>letsencrypt.org<span class=\"hljs-regexp\">/certs/</span>lets-encrypt-x3-cross-signed.pem &gt; intermediate.pem\ncat signed.crt intermediate.pem &gt; chained.pem\nnginx -s reload\n</code></pre><p>通过 <code>chmod a+x renew_cert.sh</code> 赋予执行权限。\n<code>crontab -e</code>加入以下内容：</p>\n<pre><code><span class=\"hljs-symbol\">0 </span><span class=\"hljs-number\">0</span> <span class=\"hljs-number\">1</span> * * ~/ssl/renew_cert.sh &gt;/dev/null <span class=\"hljs-number\">2</span>&gt;&amp;<span class=\"hljs-number\">1</span>\n</code></pre><p>这样以后证书每个月都会自动更新</p>\n</li>\n</ol>\n<h3 id=\"更新日志\">更新日志</h3>\n<p>之前做的时候没有记录，所以说一下大体流程吧。\n这个项目是从服务端开始开发的，先是要搭建一个RESTful API的服务器，用Mocha + chai 测试功能。\n后端功能实现后，开始搞前端，一开始是用vue-cli搭的脚手架，而且admin跟client是分开相互独立的，先开发的admin，最后是client。\n开发过程中对<code>build</code>目录下的webpack配置文件修改了很多次，结合<code>vue-hackernews-2.0</code>加入了服务端渲染的功能，并去掉了dev开发模式的配置。\n随着前端功能的增多也在不断修改后端逻辑，最终形成了beta版本——<a href=\"https://github.com/xiao555/New-Blog/tree/c8b6e2d909f284d10a484272ac215043978900ed\">github</a>, 后面因为其他事情就没再搞。</p>\n<p>在考完java和算法之后，花了两三天才把之前的半成品完善了一下，改动如下：</p>\n<ul>\n<li>改为比较正常sidebar</li>\n<li>取消顶部导航菜单</li>\n<li>markdown渲染弃用vue-markdown，自己用marked + highlight.js + uslug 打造一个语法高亮，能自动生成toc的组件</li>\n<li>取消了category和tag页面，增加archive页面</li>\n<li>构建工具上切换回dev模式，毕竟还要边改边看效果</li>\n</ul>\n<h4 id=\"201767\">2017.6.7</h4>\n<ul>\n<li>实现Archive页面逻辑</li>\n<li>测试production环境下build &amp; start 失败，只有外部css，没有组件内css，原因是都用<code>extract-text-webpack-plugin</code> 单独打包到<code>style.css</code>，外部css把组件内的覆盖掉了，解决办法：查询文档，用<code>const extractCSS = new ExtractTextPlugin(&#39;css/[name].css&#39;);</code>来实现Multiple Instances。</li>\n<li>用<code>vue-meta</code>实现title的自动更新，同时服务端<code>server.js</code>也要进行相应的修改，优化SEO</li>\n</ul>\n<h4 id=\"201768\">2017.6.8</h4>\n<ul>\n<li>增加响应式布局</li>\n<li>服务器上跑了下，修复了部分依赖没有的问题</li>\n<li>发现admin和client分开的话，部署运行都要各跑一遍，太麻烦，于是admin合并到client，重构后的client由blog和admin组成，也算同构了一下</li>\n<li>每个过程都在不断的优化代码结构，明天把一些配置项整合出来，统一管理</li>\n</ul>\n<h4 id=\"201712\">2017.12</h4>\n<p>这两天太浪了~</p>\n<ul>\n<li>增加文章阅读计数功能</li>\n<li>配置项统一在 <code>config/index.js</code> 里</li>\n<li>部署后发现https图标不是绿色的，以为我的免费Let&#39;s Encrypt 证书有问题...最后搞了半天发现是因为有http的图片外链，图片之前放在七牛上的，打算服务器上搞一波，再看看有没有什么好的支持https的CDN</li>\n<li>调试服务器过程中发现我的网页加载有点慢，主要是生成的<code>app.js</code>太大了，有1M多，后面可以优化一下，减少依赖库的使用，发现一个<code>highlight.js</code>就占了三四百K。</li>\n</ul>\n<p>所以后面主要任务是解决一下http外链的问题，优化一下性能。</p>\n<ul>\n<li>外链问题解决了，用的<a href=\"https://www.netlify.com/\">netlify</a>，可以直接导入github的repo，很方便，就是国外的有点慢</li>\n</ul>\n<h4 id=\"2017722\">2017.7.22</h4>\n<p>趁周末在公司做些自己的事23333\n之前分析了提高性能的一些方法，主要是减少打包生成的app.js的体积，这次更新前运行<code>npm run build</code>的结果是这样的：</p>\n<pre><code class=\"lang-bash\">Total precache size is about <span class=\"hljs-number\">2.75</span> MB <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">12</span> resources.\nHash: <span class=\"hljs-number\">8</span>a46e668ed80f8d7a493\nVersion: webpack <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">1</span>\nTime: <span class=\"hljs-number\">32802ms</span>\n                                         Asset       Size  Chunks                    Chunk Names\n    static/fonts/FFMetaPro-Normal<span class=\"hljs-selector-class\">.ec7ccf1</span><span class=\"hljs-selector-class\">.woff</span>    <span class=\"hljs-number\">71.7</span> kB          [emitted]\n    static/img/fontawesome-webfont.<span class=\"hljs-number\">912</span>ec66<span class=\"hljs-selector-class\">.svg</span>     <span class=\"hljs-number\">444</span> kB          [emitted]  [big]\n  static/fonts/fontawesome-webfont<span class=\"hljs-selector-class\">.b06871f</span><span class=\"hljs-selector-class\">.ttf</span>     <span class=\"hljs-number\">166</span> kB          [emitted]\nstatic/fonts/fontawesome-webfont<span class=\"hljs-selector-class\">.af7ae50</span><span class=\"hljs-selector-class\">.woff2</span>    <span class=\"hljs-number\">77.2</span> kB          [emitted]\n static/fonts/fontawesome-webfont<span class=\"hljs-selector-class\">.fee66e7</span><span class=\"hljs-selector-class\">.woff</span>      <span class=\"hljs-number\">98</span> kB          [emitted]\n       static/img/FFMetaPro-Normal.<span class=\"hljs-number\">5</span>d836bf<span class=\"hljs-selector-class\">.svg</span>    <span class=\"hljs-number\">2.12</span> MB          [emitted]  [big]\n     static/fonts/FFMetaPro-Normal.<span class=\"hljs-number\">4</span>eebf0c<span class=\"hljs-selector-class\">.eot</span>     <span class=\"hljs-number\">200</span> kB          [emitted]\n     static/fonts/FFMetaPro-Normal.<span class=\"hljs-number\">3767</span>f35<span class=\"hljs-selector-class\">.ttf</span>     <span class=\"hljs-number\">199</span> kB          [emitted]\n  static/fonts/fontawesome-webfont.<span class=\"hljs-number\">674</span>f50d<span class=\"hljs-selector-class\">.eot</span>     <span class=\"hljs-number\">166</span> kB          [emitted]\n                                        app<span class=\"hljs-selector-class\">.js</span>    <span class=\"hljs-number\">1.27</span> MB       <span class=\"hljs-number\">0</span>  [emitted]  [big]  app\n                                     vendor<span class=\"hljs-selector-class\">.js</span>  <span class=\"hljs-number\">810</span> bytes       <span class=\"hljs-number\">1</span>  [emitted]         vendor\n                                      style<span class=\"hljs-selector-class\">.js</span>  <span class=\"hljs-number\">263</span> bytes       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                   manifest<span class=\"hljs-selector-class\">.js</span>    <span class=\"hljs-number\">1.39</span> kB       <span class=\"hljs-number\">3</span>  [emitted]         manifest\n                                   css/app<span class=\"hljs-selector-class\">.css</span>    <span class=\"hljs-number\">27.5</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n                                 css/style<span class=\"hljs-selector-class\">.css</span>    <span class=\"hljs-number\">39.1</span> kB       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                    index<span class=\"hljs-selector-class\">.html</span>    <span class=\"hljs-number\">1.26</span> kB          [emitted]\n\n&gt; client@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span> build:server /var/www/New-Blog/client\n&gt; cross-env NODE_ENV=production webpack --config build/webpack<span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span> --progress --hide-modules\n\nHash: c1685fd6bd9a9bb148a6\nVersion: webpack <span class=\"hljs-number\">2.6</span>.<span class=\"hljs-number\">1</span>\nTime: <span class=\"hljs-number\">9352ms</span>\n              Asset     Size  Chunks                    Chunk Names\nvue-ssr-bundle<span class=\"hljs-selector-class\">.json</span>  <span class=\"hljs-number\">1.72</span> MB          [emitted]  [big]\n</code></pre>\n<p>可以看到一个app.js就占了1.27MB, 此时网页加载的情况是这样的:\n<img src=\"https://xiao555.netlify.com/preyouhua.jpg\" alt=\"\">\n然后我看了一下别人的app.js，压缩后基本都是几十k大小，而我是几百k，所以app.js的大小是一个优化点，在分析了为何app.js这么大后，我进行了如下优化：</p>\n<ul>\n<li>减少对这些库的依赖，&#39;marked&#39;,&#39;highlight.js&#39;,&#39;uslug&#39;, &#39;vuejs-datepicker&#39;, &#39;Vuex&#39;</li>\n<li>markdown 渲染放在server端进行，article Model增加存放markdown的字段，对数据库中的旧数据创建Migration脚本</li>\n</ul>\n<p>优化后运行<code>npm run build</code>的结果是这样的：</p>\n<pre><code class=\"lang-bash\">Total precache size is about <span class=\"hljs-number\">1.63</span> MB <span class=\"hljs-keyword\">for</span> <span class=\"hljs-number\">12</span> resources.\nHash: <span class=\"hljs-number\">85</span>db4cfa5f72482c3c59\nVersion: webpack <span class=\"hljs-number\">2.3</span>.<span class=\"hljs-number\">0</span>\nTime: <span class=\"hljs-number\">10386ms</span>\n                                         Asset       Size  Chunks                    Chunk Names\n                                        app<span class=\"hljs-selector-class\">.js</span>     <span class=\"hljs-number\">203</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n    static/img/fontawesome-webfont.<span class=\"hljs-number\">912</span>ec66<span class=\"hljs-selector-class\">.svg</span>     <span class=\"hljs-number\">444</span> kB          [emitted]  [big]\n  static/fonts/fontawesome-webfont<span class=\"hljs-selector-class\">.b06871f</span><span class=\"hljs-selector-class\">.ttf</span>     <span class=\"hljs-number\">166</span> kB          [emitted]\nstatic/fonts/fontawesome-webfont<span class=\"hljs-selector-class\">.af7ae50</span><span class=\"hljs-selector-class\">.woff2</span>    <span class=\"hljs-number\">77.2</span> kB          [emitted]\n static/fonts/fontawesome-webfont<span class=\"hljs-selector-class\">.fee66e7</span><span class=\"hljs-selector-class\">.woff</span>      <span class=\"hljs-number\">98</span> kB          [emitted]\n       static/img/FFMetaPro-Normal.<span class=\"hljs-number\">5</span>d836bf<span class=\"hljs-selector-class\">.svg</span>    <span class=\"hljs-number\">2.12</span> MB          [emitted]  [big]\n     static/fonts/FFMetaPro-Normal.<span class=\"hljs-number\">4</span>eebf0c<span class=\"hljs-selector-class\">.eot</span>     <span class=\"hljs-number\">200</span> kB          [emitted]\n     static/fonts/FFMetaPro-Normal.<span class=\"hljs-number\">3767</span>f35<span class=\"hljs-selector-class\">.ttf</span>     <span class=\"hljs-number\">199</span> kB          [emitted]\n    static/fonts/FFMetaPro-Normal<span class=\"hljs-selector-class\">.ec7ccf1</span><span class=\"hljs-selector-class\">.woff</span>    <span class=\"hljs-number\">71.7</span> kB          [emitted]\n  static/fonts/fontawesome-webfont.<span class=\"hljs-number\">674</span>f50d<span class=\"hljs-selector-class\">.eot</span>     <span class=\"hljs-number\">166</span> kB          [emitted]\n                                     vendor<span class=\"hljs-selector-class\">.js</span>  <span class=\"hljs-number\">810</span> bytes       <span class=\"hljs-number\">1</span>  [emitted]         vendor\n                                      style<span class=\"hljs-selector-class\">.js</span>  <span class=\"hljs-number\">253</span> bytes       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                   manifest<span class=\"hljs-selector-class\">.js</span>    <span class=\"hljs-number\">1.38</span> kB       <span class=\"hljs-number\">3</span>  [emitted]         manifest\n                                   css/app<span class=\"hljs-selector-class\">.css</span>    <span class=\"hljs-number\">22.1</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n                                 css/style<span class=\"hljs-selector-class\">.css</span>    <span class=\"hljs-number\">39.2</span> kB       <span class=\"hljs-number\">2</span>  [emitted]         style\n                               css/app<span class=\"hljs-selector-class\">.css</span><span class=\"hljs-selector-class\">.map</span>    <span class=\"hljs-number\">29.6</span> kB       <span class=\"hljs-number\">0</span>  [emitted]         app\n                             css/style<span class=\"hljs-selector-class\">.css</span><span class=\"hljs-selector-class\">.map</span>    <span class=\"hljs-number\">36.1</span> kB       <span class=\"hljs-number\">2</span>  [emitted]         style\n                                    index<span class=\"hljs-selector-class\">.html</span>    <span class=\"hljs-number\">1.23</span> kB          [emitted]\n\n&gt; client@<span class=\"hljs-number\">1.0</span>.<span class=\"hljs-number\">0</span> build:server /Users/zhangruiwu/Desktop/demo-learn/newBlog/client\n&gt; cross-env NODE_ENV=production webpack --config build/webpack<span class=\"hljs-selector-class\">.server</span><span class=\"hljs-selector-class\">.config</span><span class=\"hljs-selector-class\">.js</span> --progress --hide-modules\n\nHash: <span class=\"hljs-number\">5</span>b9d7f18053508c4e7a5\nVersion: webpack <span class=\"hljs-number\">2.3</span>.<span class=\"hljs-number\">0</span>\nTime: <span class=\"hljs-number\">4008ms</span>\n              Asset    Size  Chunks                    Chunk Names\nvue-ssr-bundle<span class=\"hljs-selector-class\">.json</span>  <span class=\"hljs-number\">556</span> kB          [emitted]  [big]\n</code></pre>\n<p>效果显著，可以看到总大小由2.75 MB减小的1.63 MB， app.js由1.27 MB减小到203 kB， vue-ssr-bundle.json也从1.72 MB减小到556 kB。我们再看看部署到服务器后网页加载情况：\n<img src=\"https://xiao555.netlify.com/afteryouhua.jpg\" alt=\"\">\n效果显著有没有，Load从4.15s减小到了1.31s，如果再要优化的话，其实也就是减少请求数，然后优化一下头像的处理，想到两种方案，一种换成base64，结果发现app.js变大了许多，编码有点多。第二种换成webp格式，效果如下：\n<img src=\"https://xiao555.netlify.com/afterwebp.jpg\" alt=\"\">\n加载速度减小的1s以内了。</p>\n<p>后面再该合并的合并，cdn的cdn，首屏加载性能方面的问题就基本解决的差不多了。先睡觉了==！</p>\n<h3 id=\"todo\">TODO</h3>\n<ul>\n<li>文章列表分页</li>\n<li>评论区</li>\n<li>管理后台界面优化，目前是仿WordPress</li>\n<li>重构，改成同构Web应用</li>\n<li>服务器端（腾讯云）的优化</li>\n</ul>\n","excerptMarkdown":"这是一个vue的练手项目，也是koa的练手项目。\n这是一个js写的完整的博客系统。\n这是一个前后端分离 + 服务端渲染的博客系统。\n这是一个前端 SPA + 后端 RESTful API 的博客系统。\n这是一个为了找实习做的个人作品，虽然是在找完实习后完成的。\n这是我以后的试验田，也是个人分享的平台。\n当然还有很多不足，今后会逐渐完善。","excerpt":"<p>这是一个vue的练手项目，也是koa的练手项目。\n这是一个js写的完整的博客系统。\n这是一个前后端分离 + 服务端渲染的博客系统。\n这是一个前端 SPA + 后端 RESTful API 的博客系统。\n这是一个为了找实习做的个人作品，虽然是在找完实习后完成的。\n这是我以后的试验田，也是个人分享的平台。\n当然还有很多不足，今后会逐渐完善。</p>\n","status":"Published","lastEditTime":"2017-07-23","createTime":"2017-06-13","tags":[],"visits":22,"id":"59742253bf62d419736bca00"}]